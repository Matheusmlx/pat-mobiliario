{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzDate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzDate.vue","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    dateFormat: {\n      type: String,\n      default: 'DD/MM/YYYY',\n      validator: function validator(value) {\n        return ['DD/MM/YYYY', 'MM/DD/YYYY'].indexOf(value) !== -1;\n      }\n    },\n    dateMask: {\n      type: String,\n      default: '##/##/####'\n    },\n    limparData: {\n      type: Boolean,\n      default: false\n    },\n    dateTime: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: ''\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    isRequired: {\n      type: Boolean,\n      default: false\n    },\n    nameDate: {\n      type: String,\n      default: ''\n    },\n    placeholderDate: {\n      type: String,\n      default: 'DD/MM/YYYY'\n    },\n    nameHour: {\n      type: String,\n      default: ''\n    },\n    placeholderHour: {\n      type: String,\n      default: 'HH:mm'\n    },\n    isDisabled: {\n      type: Boolean,\n      default: false\n    },\n    minDate: {\n      type: String\n    },\n    maxDate: {\n      type: String\n    }\n  },\n  inject: ['$validator'],\n  data: function data() {\n    return {\n      date: null,\n      dateFormatted: null,\n      dateInvalid: false,\n      time: null,\n      timeFormatted: null,\n      dialogDate: false,\n      dialogTime: false,\n      reverseDateFormatObj: {\n        'DD/MM/YYYY': 'YYYY-MM-DD',\n        'MM/DD/YYYY': 'YYYY-DD-MM'\n      },\n      focus: false\n    };\n  },\n  computed: {\n    reverseDateFormat: function reverseDateFormat() {\n      return this.reverseDateFormatObj[this.dateFormat];\n    },\n    currentLanguage: function currentLanguage() {\n      return this.$vuetify.lang.current;\n    },\n    checkDate: function checkDate() {\n      if (this.focus) {\n        return this.validateDate;\n      }\n\n      return {\n        required: this.isRequired,\n        date_format: this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n      };\n    },\n    validateDate: function validateDate() {\n      var validationDate = {};\n\n      if (this.isRequired) {\n        validationDate.required = true;\n      }\n\n      if (this.dateFormatted && this.dateFormatted.length === 10) {\n        validationDate.date_format = this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy';\n\n        if (this.maxDate) {\n          validationDate.before = this.moment(this.maxDate).add(1, 'days').format(this.dateFormat);\n        }\n\n        if (this.minDate) {\n          validationDate.after = this.moment(this.minDate).subtract(1, 'days').format(this.dateFormat);\n        }\n      }\n\n      return validationDate;\n    }\n  },\n  watch: {\n    value: {\n      handler: function handler(val) {\n        this.updateDateTimeByModel(val);\n        this.updateValue(val);\n      },\n      immediate: true\n    },\n    limparData: function limparData(val) {\n      if (val) {\n        this.dateFormatted = null;\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.alterTabIndexFromAppendButtons();\n  },\n  methods: {\n    getFormattedDate: function getFormattedDate(day, month, year) {\n      var getFnDateFormat = {\n        'DD/MM/YYYY': function DDMMYYYY() {\n          return \"\".concat(day, \"/\").concat(month, \"/\").concat(year);\n        },\n        'MM/DD/YYYY': function MMDDYYYY() {\n          return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n        }\n      };\n      return getFnDateFormat[this.dateFormat]();\n    },\n    formatDate: function formatDate(date) {\n      if (!date) return null;\n\n      var _date$split = date.split('-'),\n          _date$split2 = _slicedToArray(_date$split, 3),\n          year = _date$split2[0],\n          month = _date$split2[1],\n          day = _date$split2[2];\n\n      return this.getFormattedDate(day, month, year);\n    },\n    pickDateEvent: function pickDateEvent() {\n      this.dialogDate = false;\n    },\n    validateAndParseDate: function validateAndParseDate(date) {\n      if (!date || !this.dateStringIsValid(date) || this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date)) {\n        if (date && this.dateStringIsValid(date) && (this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date))) {\n          this.date = null;\n          this.dateFormatted = '';\n          return;\n        }\n\n        if (date === null || date.length === 0) {\n          this.date = null;\n          this.dateFormatted = '';\n          this.$emit('input', null);\n        }\n\n        return;\n      }\n\n      var dateObj = this.getDayMonthYearFromDateString(date);\n      this.date = \"\".concat(dateObj.year, \"-\").concat(dateObj.month, \"-\").concat(dateObj.day);\n      this.updateModelDate(this.date);\n    },\n    getDayMonthYearFromDateString: function getDayMonthYearFromDateString(date) {\n      var dateFormated = date.replace(new RegExp('/', 'g'), '');\n      var getFnDateFormat = {\n        'DD/MM/YYYY': function DDMMYYYY() {\n          return {\n            day: dateFormated.substring(0, 2),\n            month: dateFormated.substring(2, 4),\n            year: dateFormated.substring(4, 8)\n          };\n        },\n        'MM/DD/YYYY': function MMDDYYYY() {\n          return {\n            day: dateFormated.substring(2, 4),\n            month: dateFormated.substring(0, 2),\n            year: dateFormated.substring(4, 8)\n          };\n        }\n      };\n      return getFnDateFormat[this.dateFormat]();\n    },\n    dayIsValidForMonthAndYear: function dayIsValidForMonthAndYear(day, month, year) {\n      var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      var isLeapYear = !(year % 4) && year % 100 || !(year % 400);\n\n      if (isLeapYear) {\n        daysInMonth[1] = 29;\n      }\n\n      return day > 0 && day <= daysInMonth[--month];\n    },\n    dateStringIsValid: function dateStringIsValid(date) {\n      if (date.length < 8) return false;\n      var dateObj = this.getDayMonthYearFromDateString(date);\n      var monthIsValid = Number(dateObj.month) > 0 && Number(dateObj.month) < 13;\n      var yearIsValid = Number(dateObj.year) > 999;\n      if (!monthIsValid || !yearIsValid) return false;\n      return this.dayIsValidForMonthAndYear(Number(dateObj.day), Number(dateObj.month), Number(dateObj.year));\n    },\n    timeStringIsValid: function timeStringIsValid() {\n      if (!this.timeFormatted || this.timeFormatted.length < 4) return false;\n      var firstTimeDigit = Number(this.timeFormatted.substring(0, 2));\n      var secondTimeDigit = Number(this.timeFormatted.substring(2, 4));\n      return firstTimeDigit < 24 && secondTimeDigit < 60;\n    },\n    validateTimeEvent: function validateTimeEvent() {\n      if (!this.timeStringIsValid()) {\n        this.time = null;\n        this.timeFormatted = '';\n        return;\n      }\n\n      var hour = this.timeFormatted.substring(0, 2);\n      var minute = this.timeFormatted.substring(2, 4);\n      this.time = hour + ':' + minute;\n    },\n    changeTimeEvent: function changeTimeEvent() {\n      this.timeFormatted = this.time.replace(':', '');\n      this.$refs.menu.save(this.time);\n    },\n    openMenuDate: function openMenuDate() {\n      this.dialogDate = true;\n    },\n    openMenuTime: function openMenuTime() {\n      this.dialogTime = true;\n    },\n    setEmptyTimeAndDate: function setEmptyTimeAndDate() {\n      this.time = null;\n      this.timeFormatted = '';\n      this.date = null;\n      this.dateFormatted = '';\n    },\n    updateModelDate: function updateModelDate(value) {\n      this.dateInvalid = false;\n\n      if (this.time && value) {\n        var dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, this.time);\n        var dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone);\n        this.$emit('input', dateTimeTimezoneZero);\n        return;\n      }\n\n      if (this.time && !value) {\n        this.$emit('input', value);\n        return;\n      }\n\n      if (!this.time && !value) {\n        this.$emit('input', null);\n        return;\n      }\n\n      if (!this.time) {\n        var _dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, '00:00');\n\n        var _dateTimeTimezoneZero = this.getDateTimeZeroTimezone(_dateTimeWithTimezone);\n\n        this.$emit('input', _dateTimeTimezoneZero);\n        this.selectContentInputHour();\n      }\n    },\n    updateModelTime: function updateModelTime(value) {\n      if (this.date && value) {\n        var dateTimeWithTimezone = this.buildDateTimeWithTimezone(this.date, value);\n        var dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone);\n        this.$emit('input', dateTimeTimezoneZero);\n        return;\n      }\n\n      if (this.date && !value) this.$emit('input', this.date);\n    },\n    updateDateTimeByModel: function updateDateTimeByModel(modelVal) {\n      var maxLengthOfModelDateWithTime = 28;\n\n      if (!modelVal || modelVal.length > maxLengthOfModelDateWithTime) {\n        this.setEmptyTimeAndDate();\n        return;\n      }\n\n      if (this.dateTime) this.updateDateWithTimeByModel(modelVal);else this.updateDateWithoutTimeByModel(modelVal);\n    },\n    updateDateWithTimeByModel: function updateDateWithTimeByModel(modelVal) {\n      var maxLengthOfModel = 28,\n          dateModelLength = 10,\n          dateModelWithSeparatorLength = 11;\n\n      if (modelVal.length > dateModelWithSeparatorLength && modelVal.length < maxLengthOfModel) {\n        this.time = null;\n        this.timeFormatted = '';\n        return;\n      } else if (modelVal && modelVal.length < dateModelLength) {\n        this.date = null;\n        this.dateFormatted = '';\n        return;\n      }\n\n      if (modelVal.length === dateModelLength) {\n        this.date = modelVal;\n        this.dateFormatted = this.formatDate(modelVal);\n      } else if (modelVal.length === maxLengthOfModel) {\n        var dateTime = this.getDateTimeWithSystemTimezone(modelVal);\n        var splitDateTime = dateTime.split('T');\n        this.date = splitDateTime[0];\n        this.dateFormatted = this.formatDate(this.date);\n        this.time = splitDateTime[1].substring(0, 5);\n        this.changeTimeEvent();\n      }\n    },\n    updateDateWithoutTimeByModel: function updateDateWithoutTimeByModel(modelVal) {\n      var maxDateModelLength = 10;\n\n      if (modelVal.length < maxDateModelLength) {\n        this.date = null;\n        this.dateFormatted = '';\n        return;\n      }\n\n      if (modelVal.length >= maxDateModelLength) {\n        this.date = modelVal.substring(0, maxDateModelLength);\n        this.dateFormatted = this.formatDate(this.date);\n      }\n    },\n    getDateTimeWithSystemTimezone: function getDateTimeWithSystemTimezone(dateTime) {\n      var offset = this.getOffsetFromCurrentDateTime(dateTime);\n      return this.moment(dateTime).utcOffset(offset).format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ');\n    },\n    getDateTimeZeroTimezone: function getDateTimeZeroTimezone(dateTime) {\n      var offset = this.getOffsetFromCurrentDateTime(dateTime);\n      return this.moment(dateTime).utcOffset(offset).format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ');\n    },\n    buildDateTimeWithTimezone: function buildDateTimeWithTimezone(date, time) {\n      var seconds = '00';\n      var dateTime = date + 'T' + time + ':' + seconds;\n      var offset = this.getOffsetFromCurrentDateTime(dateTime);\n      return dateTime + offset;\n    },\n    getOffsetFromCurrentDateTime: function getOffsetFromCurrentDateTime(dateTime) {\n      return this.moment(dateTime).tz(this.$store.state.loki.timezone).format('Z');\n    },\n    selectContentInputHour: function selectContentInputHour() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var input = document.getElementsByName(_this.nameHour)[0];\n\n        if (input) {\n          input.setSelectionRange(0, 5);\n        }\n      });\n    },\n    updateValue: function updateValue(val) {\n      if (val) {\n        var dateTime = this.getDateTimeWithSystemTimezone(val);\n        var splitDateTime = dateTime.split('T');\n        this.date = splitDateTime[0];\n        this.dateFormatted = this.formatDate(this.date);\n        this.time = splitDateTime[1].substring(0, 5);\n        this.timeFormatted = this.time.replace(':', '');\n      }\n    },\n    dateMinIsAllowed: function dateMinIsAllowed(date) {\n      if (this.minDate) {\n        var dateObj = this.getDayMonthYearFromDateString(date);\n        var minDateObj = this.getDayMonthYearFromDateString(this.moment(this.minDate).format('DD/MM/YYYY'));\n        return this.moment(this.moment(\"\".concat(dateObj.year, \"-\").concat(dateObj.month, \"-\").concat(dateObj.day))).isBefore(this.moment(\"\".concat(minDateObj.year, \"-\").concat(minDateObj.month, \"-\").concat(minDateObj.day)));\n      }\n\n      return false;\n    },\n    dateMaxIsAllowed: function dateMaxIsAllowed(date) {\n      if (this.maxDate) {\n        var dateObj = this.getDayMonthYearFromDateString(date);\n        var maxDateObj = this.getDayMonthYearFromDateString(this.moment(this.maxDate).format('DD/MM/YYYY'));\n        return this.moment(\"\".concat(dateObj.year, \"-\").concat(dateObj.month, \"-\").concat(dateObj.day)).isAfter(this.moment(\"\".concat(maxDateObj.year, \"-\").concat(maxDateObj.month, \"-\").concat(maxDateObj.day)));\n      }\n\n      return false;\n    },\n    alterTabIndexFromAppendButtons: function alterTabIndexFromAppendButtons() {\n      var bottonsDate = document.querySelectorAll('.az-date-date-input .v-input__append-inner .v-icon');\n      bottonsDate.forEach(function (btn) {\n        btn.tabIndex = '-1';\n      });\n      var bottonsTime = document.querySelectorAll('.az-date-time-input .v-input__append-inner .v-icon');\n      bottonsTime.forEach(function (btn) {\n        btn.tabIndex = '-1';\n      });\n    },\n    changeFocus: function changeFocus(event) {\n      if (event.type === 'focus') {\n        this.focus = true;\n      } else if (event.type === 'blur') {\n        this.focus = false;\n      }\n    }\n  }\n};",{"version":3,"sources":["AzDate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,YAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,KAAA,EAAA;AACA,eAAA,CAAA,YAAA,EAAA,YAAA,EAAA,OAAA,CAAA,KAAA,MAAA,CAAA,CAAA;AACA;AALA,KADA;AAQA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KARA;AAYA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAhBA;AAoBA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KApBA;AAwBA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAxBA;AA4BA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KA5BA;AAgCA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAhCA;AAoCA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KApCA;AAwCA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAxCA;AA4CA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KA5CA;AAgDA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAhDA;AAoDA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KApDA;AAuDA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AAvDA,GADA;AA4DA,EAAA,MAAA,EAAA,CAAA,YAAA,CA5DA;AA6DA,EAAA,IA7DA,kBA6DA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IADA;AAEA,MAAA,aAAA,EAAA,IAFA;AAGA,MAAA,WAAA,EAAA,KAHA;AAIA,MAAA,IAAA,EAAA,IAJA;AAKA,MAAA,aAAA,EAAA,IALA;AAMA,MAAA,UAAA,EAAA,KANA;AAOA,MAAA,UAAA,EAAA,KAPA;AAQA,MAAA,oBAAA,EAAA;AACA,sBAAA,YADA;AAEA,sBAAA;AAFA,OARA;AAYA,MAAA,KAAA,EAAA;AAZA,KAAA;AAcA,GA5EA;AA6EA,EAAA,QAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,aAAA,KAAA,oBAAA,CAAA,KAAA,UAAA,CAAA;AACA,KAHA;AAIA,IAAA,eAJA,6BAIA;AACA,aAAA,KAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,KANA;AAOA,IAAA,SAPA,uBAOA;AACA,UAAA,KAAA,KAAA,EAAA;AACA,eAAA,KAAA,YAAA;AACA;;AACA,aAAA;AACA,QAAA,QAAA,EAAA,KAAA,UADA;AAEA,QAAA,WAAA,EAAA,KAAA,UAAA,KAAA,YAAA,GAAA,YAAA,GAAA;AAFA,OAAA;AAIA,KAfA;AAgBA,IAAA,YAhBA,0BAgBA;AACA,UAAA,cAAA,GAAA,EAAA;;AAEA,UAAA,KAAA,UAAA,EAAA;AACA,QAAA,cAAA,CAAA,QAAA,GAAA,IAAA;AACA;;AAEA,UAAA,KAAA,aAAA,IAAA,KAAA,aAAA,CAAA,MAAA,KAAA,EAAA,EAAA;AACA,QAAA,cAAA,CAAA,WAAA,GAAA,KAAA,UAAA,KAAA,YAAA,GAAA,YAAA,GAAA,YAAA;;AAEA,YAAA,KAAA,OAAA,EAAA;AACA,UAAA,cAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,KAAA,OAAA,EACA,GADA,CACA,CADA,EACA,MADA,EAEA,MAFA,CAEA,KAAA,UAFA,CAAA;AAGA;;AAEA,YAAA,KAAA,OAAA,EAAA;AACA,UAAA,cAAA,CAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,OAAA,EACA,QADA,CACA,CADA,EACA,MADA,EAEA,MAFA,CAEA,KAAA,UAFA,CAAA;AAGA;AACA;;AACA,aAAA,cAAA;AACA;AAvCA,GA7EA;AAsHA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,OADA,mBACA,GADA,EACA;AACA,aAAA,qBAAA,CAAA,GAAA;AACA,aAAA,WAAA,CAAA,GAAA;AACA,OAJA;AAKA,MAAA,SAAA,EAAA;AALA,KADA;AAQA,IAAA,UARA,sBAQA,GARA,EAQA;AACA,UAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,IAAA;AACA;AACA;AAZA,GAtHA;AAoIA,EAAA,OApIA,qBAoIA;AACA,SAAA,8BAAA;AACA,GAtIA;AAuIA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,4BACA,GADA,EACA,KADA,EACA,IADA,EACA;AACA,UAAA,eAAA,GAAA;AACA,sBAAA,oBAAA;AACA,2BAAA,GAAA,cAAA,KAAA,cAAA,IAAA;AACA,SAHA;AAIA,sBAAA,oBAAA;AACA,2BAAA,KAAA,cAAA,GAAA,cAAA,IAAA;AACA;AANA,OAAA;AASA,aAAA,eAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,KAZA;AAaA,IAAA,UAbA,sBAaA,IAbA,EAaA;AACA,UAAA,CAAA,IAAA,EAAA,OAAA,IAAA;;AADA,wBAGA,IAAA,CAAA,KAAA,CAAA,GAAA,CAHA;AAAA;AAAA,UAGA,IAHA;AAAA,UAGA,KAHA;AAAA,UAGA,GAHA;;AAIA,aAAA,KAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AACA,KAlBA;AAmBA,IAAA,aAnBA,2BAmBA;AACA,WAAA,UAAA,GAAA,KAAA;AACA,KArBA;AAsBA,IAAA,oBAtBA,gCAsBA,IAtBA,EAsBA;AACA,UAAA,CAAA,IAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,IAAA,IAAA,KAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,KAAA,gBAAA,CAAA,IAAA,KAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,IAAA;AACA,eAAA,aAAA,GAAA,EAAA;AACA;AACA;;AACA,YAAA,IAAA,KAAA,IAAA,IAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,IAAA;AACA,eAAA,aAAA,GAAA,EAAA;AACA,eAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACA;;AACA;AACA;;AAEA,UAAA,OAAA,GAAA,KAAA,6BAAA,CAAA,IAAA,CAAA;AAEA,WAAA,IAAA,aAAA,OAAA,CAAA,IAAA,cAAA,OAAA,CAAA,KAAA,cAAA,OAAA,CAAA,GAAA;AACA,WAAA,eAAA,CAAA,KAAA,IAAA;AACA,KAzCA;AA0CA,IAAA,6BA1CA,yCA0CA,IA1CA,EA0CA;AACA,UAAA,YAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,MAAA,CAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA;AACA,UAAA,eAAA,GAAA;AACA,sBAAA,oBAAA;AACA,iBAAA;AACA,YAAA,GAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CADA;AAEA,YAAA,KAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAFA;AAGA,YAAA,IAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAHA,WAAA;AAKA,SAPA;AAQA,sBAAA,oBAAA;AACA,iBAAA;AACA,YAAA,GAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CADA;AAEA,YAAA,KAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAFA;AAGA,YAAA,IAAA,EAAA,YAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAHA,WAAA;AAKA;AAdA,OAAA;AAiBA,aAAA,eAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,KA9DA;AA+DA,IAAA,yBA/DA,qCA+DA,GA/DA,EA+DA,KA/DA,EA+DA,IA/DA,EA+DA;AACA,UAAA,WAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AACA,UAAA,UAAA,GAAA,EAAA,IAAA,GAAA,CAAA,KAAA,IAAA,GAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,CAAA;;AAEA,UAAA,UAAA,EAAA;AACA,QAAA,WAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AACA;;AAEA,aAAA,GAAA,GAAA,CAAA,IAAA,GAAA,IAAA,WAAA,CAAA,EAAA,KAAA,CAAA;AACA,KAxEA;AAyEA,IAAA,iBAzEA,6BAyEA,IAzEA,EAyEA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA,OAAA,KAAA;AAEA,UAAA,OAAA,GAAA,KAAA,6BAAA,CAAA,IAAA,CAAA;AAEA,UAAA,YAAA,GAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA;AACA,UAAA,WAAA,GAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,GAAA;AAEA,UAAA,CAAA,YAAA,IAAA,CAAA,WAAA,EAAA,OAAA,KAAA;AAEA,aAAA,KAAA,yBAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;AACA,KApFA;AAqFA,IAAA,iBArFA,+BAqFA;AACA,UAAA,CAAA,KAAA,aAAA,IAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,EAAA,OAAA,KAAA;AAEA,UAAA,cAAA,GAAA,MAAA,CAAA,KAAA,aAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,eAAA,GAAA,MAAA,CAAA,KAAA,aAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAEA,aAAA,cAAA,GAAA,EAAA,IAAA,eAAA,GAAA,EAAA;AACA,KA5FA;AA6FA,IAAA,iBA7FA,+BA6FA;AACA,UAAA,CAAA,KAAA,iBAAA,EAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,EAAA;AACA;AACA;;AAEA,UAAA,IAAA,GAAA,KAAA,aAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,UAAA,MAAA,GAAA,KAAA,aAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAEA,WAAA,IAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MAAA;AACA,KAxGA;AAyGA,IAAA,eAzGA,6BAyGA;AACA,WAAA,aAAA,GAAA,KAAA,IAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,IAAA;AACA,KA5GA;AA6GA,IAAA,YA7GA,0BA6GA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,KA/GA;AAgHA,IAAA,YAhHA,0BAgHA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,KAlHA;AAmHA,IAAA,mBAnHA,iCAmHA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,KAxHA;AAyHA,IAAA,eAzHA,2BAyHA,KAzHA,EAyHA;AACA,WAAA,WAAA,GAAA,KAAA;;AACA,UAAA,KAAA,IAAA,IAAA,KAAA,EAAA;AACA,YAAA,oBAAA,GAAA,KAAA,yBAAA,CAAA,KAAA,EAAA,KAAA,IAAA,CAAA;AACA,YAAA,oBAAA,GAAA,KAAA,uBAAA,CAAA,oBAAA,CAAA;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,oBAAA;AACA;AACA;;AACA,UAAA,KAAA,IAAA,IAAA,CAAA,KAAA,EAAA;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,KAAA;AACA;AACA;;AACA,UAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,EAAA;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACA;AACA;;AACA,UAAA,CAAA,KAAA,IAAA,EAAA;AACA,YAAA,qBAAA,GAAA,KAAA,yBAAA,CAAA,KAAA,EAAA,OAAA,CAAA;;AACA,YAAA,qBAAA,GAAA,KAAA,uBAAA,CAAA,qBAAA,CAAA;;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,qBAAA;AACA,aAAA,sBAAA;AACA;AACA,KA/IA;AAgJA,IAAA,eAhJA,2BAgJA,KAhJA,EAgJA;AACA,UAAA,KAAA,IAAA,IAAA,KAAA,EAAA;AACA,YAAA,oBAAA,GAAA,KAAA,yBAAA,CAAA,KAAA,IAAA,EAAA,KAAA,CAAA;AACA,YAAA,oBAAA,GAAA,KAAA,uBAAA,CAAA,oBAAA,CAAA;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,oBAAA;AACA;AACA;;AACA,UAAA,KAAA,IAAA,IAAA,CAAA,KAAA,EAAA,KAAA,KAAA,CAAA,OAAA,EAAA,KAAA,IAAA;AACA,KAxJA;AAyJA,IAAA,qBAzJA,iCAyJA,QAzJA,EAyJA;AACA,UAAA,4BAAA,GAAA,EAAA;;AAEA,UAAA,CAAA,QAAA,IAAA,QAAA,CAAA,MAAA,GAAA,4BAAA,EAAA;AACA,aAAA,mBAAA;AACA;AACA;;AAEA,UAAA,KAAA,QAAA,EAAA,KAAA,yBAAA,CAAA,QAAA,EAAA,KACA,KAAA,4BAAA,CAAA,QAAA;AACA,KAnKA;AAoKA,IAAA,yBApKA,qCAoKA,QApKA,EAoKA;AACA,UAAA,gBAAA,GAAA,EAAA;AAAA,UACA,eAAA,GAAA,EADA;AAAA,UAEA,4BAAA,GAAA,EAFA;;AAIA,UAAA,QAAA,CAAA,MAAA,GAAA,4BAAA,IAAA,QAAA,CAAA,MAAA,GAAA,gBAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,EAAA;AACA;AACA,OAJA,MAIA,IAAA,QAAA,IAAA,QAAA,CAAA,MAAA,GAAA,eAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,EAAA;AACA;AACA;;AAEA,UAAA,QAAA,CAAA,MAAA,KAAA,eAAA,EAAA;AACA,aAAA,IAAA,GAAA,QAAA;AACA,aAAA,aAAA,GAAA,KAAA,UAAA,CAAA,QAAA,CAAA;AACA,OAHA,MAGA,IAAA,QAAA,CAAA,MAAA,KAAA,gBAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,6BAAA,CAAA,QAAA,CAAA;AACA,YAAA,aAAA,GAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,aAAA,IAAA,GAAA,aAAA,CAAA,CAAA,CAAA;AACA,aAAA,aAAA,GAAA,KAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA,aAAA,IAAA,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,aAAA,eAAA;AACA;AACA,KA9LA;AA+LA,IAAA,4BA/LA,wCA+LA,QA/LA,EA+LA;AACA,UAAA,kBAAA,GAAA,EAAA;;AAEA,UAAA,QAAA,CAAA,MAAA,GAAA,kBAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,EAAA;AACA;AACA;;AAEA,UAAA,QAAA,CAAA,MAAA,IAAA,kBAAA,EAAA;AACA,aAAA,IAAA,GAAA,QAAA,CAAA,SAAA,CAAA,CAAA,EAAA,kBAAA,CAAA;AACA,aAAA,aAAA,GAAA,KAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA;AACA,KA5MA;AA6MA,IAAA,6BA7MA,yCA6MA,QA7MA,EA6MA;AACA,UAAA,MAAA,GAAA,KAAA,4BAAA,CAAA,QAAA,CAAA;AACA,aAAA,KAAA,MAAA,CAAA,QAAA,EACA,SADA,CACA,MADA,EAEA,MAFA,CAEA,KAAA,iBAAA,GAAA,iBAFA,CAAA;AAGA,KAlNA;AAmNA,IAAA,uBAnNA,mCAmNA,QAnNA,EAmNA;AACA,UAAA,MAAA,GAAA,KAAA,4BAAA,CAAA,QAAA,CAAA;AACA,aAAA,KAAA,MAAA,CAAA,QAAA,EACA,SADA,CACA,MADA,EAEA,MAFA,CAEA,KAAA,iBAAA,GAAA,iBAFA,CAAA;AAGA,KAxNA;AAyNA,IAAA,yBAzNA,qCAyNA,IAzNA,EAyNA,IAzNA,EAyNA;AACA,UAAA,OAAA,GAAA,IAAA;AACA,UAAA,QAAA,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,OAAA;AACA,UAAA,MAAA,GAAA,KAAA,4BAAA,CAAA,QAAA,CAAA;AACA,aAAA,QAAA,GAAA,MAAA;AACA,KA9NA;AA+NA,IAAA,4BA/NA,wCA+NA,QA/NA,EA+NA;AACA,aAAA,KAAA,MAAA,CAAA,QAAA,EACA,EADA,CACA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,QADA,EAEA,MAFA,CAEA,GAFA,CAAA;AAGA,KAnOA;AAoOA,IAAA,sBApOA,oCAoOA;AAAA;;AACA,WAAA,SAAA,CAAA,YAAA;AACA,YAAA,KAAA,GAAA,QAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,CAAA;;AACA,YAAA,KAAA,EAAA;AACA,UAAA,KAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,CAAA;AACA;AACA,OALA;AAMA,KA3OA;AA4OA,IAAA,WA5OA,uBA4OA,GA5OA,EA4OA;AACA,UAAA,GAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,6BAAA,CAAA,GAAA,CAAA;AACA,YAAA,aAAA,GAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,aAAA,IAAA,GAAA,aAAA,CAAA,CAAA,CAAA;AACA,aAAA,aAAA,GAAA,KAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA,aAAA,IAAA,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,aAAA,aAAA,GAAA,KAAA,IAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA;AACA;AACA,KArPA;AAsPA,IAAA,gBAtPA,4BAsPA,IAtPA,EAsPA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,YAAA,OAAA,GAAA,KAAA,6BAAA,CAAA,IAAA,CAAA;AACA,YAAA,UAAA,GAAA,KAAA,6BAAA,CAAA,KAAA,MAAA,CAAA,KAAA,OAAA,EAAA,MAAA,CAAA,YAAA,CAAA,CAAA;AACA,eAAA,KAAA,MAAA,CAAA,KAAA,MAAA,WAAA,OAAA,CAAA,IAAA,cAAA,OAAA,CAAA,KAAA,cAAA,OAAA,CAAA,GAAA,EAAA,EACA,QADA,CACA,KAAA,MAAA,WAAA,UAAA,CAAA,IAAA,cAAA,UAAA,CAAA,KAAA,cAAA,UAAA,CAAA,GAAA,EADA,CAAA;AAEA;;AACA,aAAA,KAAA;AACA,KA9PA;AA+PA,IAAA,gBA/PA,4BA+PA,IA/PA,EA+PA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,YAAA,OAAA,GAAA,KAAA,6BAAA,CAAA,IAAA,CAAA;AACA,YAAA,UAAA,GAAA,KAAA,6BAAA,CAAA,KAAA,MAAA,CAAA,KAAA,OAAA,EAAA,MAAA,CAAA,YAAA,CAAA,CAAA;AACA,eAAA,KAAA,MAAA,WAAA,OAAA,CAAA,IAAA,cAAA,OAAA,CAAA,KAAA,cAAA,OAAA,CAAA,GAAA,GACA,OADA,CACA,KAAA,MAAA,WAAA,UAAA,CAAA,IAAA,cAAA,UAAA,CAAA,KAAA,cAAA,UAAA,CAAA,GAAA,EADA,CAAA;AAEA;;AACA,aAAA,KAAA;AACA,KAvQA;AAwQA,IAAA,8BAxQA,4CAwQA;AACA,UAAA,WAAA,GAAA,QAAA,CAAA,gBAAA,CAAA,oDAAA,CAAA;AACA,MAAA,WAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,GAAA,CAAA,QAAA,GAAA,IAAA;AACA,OAFA;AAGA,UAAA,WAAA,GAAA,QAAA,CAAA,gBAAA,CAAA,oDAAA,CAAA;AACA,MAAA,WAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,GAAA,CAAA,QAAA,GAAA,IAAA;AACA,OAFA;AAGA,KAjRA;AAkRA,IAAA,WAlRA,uBAkRA,KAlRA,EAkRA;AACA,UAAA,KAAA,CAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,KAAA,GAAA,IAAA;AACA,OAFA,MAEA,IAAA,KAAA,CAAA,IAAA,KAAA,MAAA,EAAA;AACA,aAAA,KAAA,GAAA,KAAA;AACA;AACA;AAxRA;AAvIA,CAAA","sourcesContent":["<template>\n    <div style=\"display: flex;\">\n        <div v-bind:style=\"dateTime ? 'width: 60%' : 'width: 100%'\">\n            <v-dialog\n                ref=\"menu\"\n                :close-on-content-click=\"false\"\n                v-model=\"dialogDate\"\n                nudge-right=\"450\"\n                nudge-bottom=\"120\"\n                transition=\"scale-transition\"\n                offset-y\n                max-width=\"290px\"\n                min-width=\"290px\"\n                v-if=\"!isDisabled\">\n                <v-date-picker\n                    v-model=\"date\"\n                    :value=\"value\"\n                    :locale=\"currentLanguage\"\n                    @input=\"updateModelDate($event), pickDateEvent()\"\n                    :min=\"minDate\"\n                    :max=\"maxDate\"\n                    class=\"az-date\"/>\n            </v-dialog>\n            <v-text-field\n                v-validate=\"checkDate\"\n                @focus=\"changeFocus\"\n                @blur=\"changeFocus\"\n                :name=\"nameDate\"\n                :error-messages=\"errors.collect(`${nameDate}`)\"\n                v-model=\"dateFormatted\"\n                :label=\"label\"\n                v-mask=\"'##/##/####'\"\n                :placeholder=\"placeholderDate\"\n                :disabled=\"isDisabled\"\n                :min-date=\"minDate\"\n                :max-date=\"maxDate\"\n                append-icon=\"event\"\n                class=\"az-date-date-input\"\n                @click:append=\"openMenuDate\"\n                @keyup=\"validateAndParseDate(dateFormatted)\">\n                <template v-slot:label v-if=\"this.$slots['label-date']\">\n                    <slot name=\"label-date\" />\n                </template>\n                <template v-slot:append-outer v-if=\"this.$slots['append-outer']\">\n                    <slot name=\"append-outer\" />\n                </template>\n                <template v-slot:append v-if=\"this.$slots['append']\">\n                    <v-btn icon @click=\"openMenuDate\">\n                        <v-icon small>event</v-icon>\n                    </v-btn>\n                    <slot name=\"append\" />\n                </template>\n            </v-text-field>\n        </div>\n        <div v-if=\"dateTime\" style=\"margin-left: 10px; width: 40%\">\n            <v-dialog\n                ref=\"menu\"\n                :close-on-content-click=\"false\"\n                v-model=\"dialogTime\"\n                nudge-right=\"540\"\n                nudge-bottom=\"120\"\n                transition=\"scale-transition\"\n                offset-y\n                max-width=\"290px\"\n                min-width=\"290px\"\n                v-if=\"!isDisabled\">\n                <v-time-picker\n                    v-if=\"dialogTime\"\n                    v-model=\"time\"\n                    :locale=\"currentLanguage\"\n                    @change=\"changeTimeEvent(), updateModelTime($event)\"\n                    format=\"24hr\"\n                    class=\"az-date\"/>\n            </v-dialog>\n            <v-text-field\n                v-validate=\"{ required: isRequired }\"\n                :name=\"nameHour\"\n                :error-messages=\"errors.collect(`${nameHour}`)\"\n                :disabled=\"isDisabled\"\n                v-model=\"timeFormatted\"\n                mask=\"time\"\n                :placeholder=\"placeholderHour\"\n                append-icon=\"access_time\"\n                class=\"az-date-time-input\"\n                @click:append=\"openMenuTime\"\n                @focus=\"selectContentInputHour\"\n                @blur=\"validateTimeEvent(), updateModelTime(time)\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        dateFormat: {\n            type: String,\n            default: 'DD/MM/YYYY',\n            validator: function(value) {\n                return ['DD/MM/YYYY', 'MM/DD/YYYY'].indexOf(value) !== -1\n            }\n        },\n        dateMask: {\n            type: String,\n            default: '##/##/####'\n        },\n        limparData: {\n            type: Boolean,\n            default: false\n        },\n        dateTime: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: String,\n            default: ''\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        isRequired: {\n            type: Boolean,\n            default: false\n        },\n        nameDate: {\n            type: String,\n            default: ''\n        },\n        placeholderDate: {\n            type: String,\n            default: 'DD/MM/YYYY'\n        },\n        nameHour: {\n            type: String,\n            default: ''\n        },\n        placeholderHour: {\n            type: String,\n            default: 'HH:mm'\n        },\n        isDisabled: {\n            type: Boolean,\n            default: false\n        },\n        minDate: {\n            type: String\n        },\n        maxDate: {\n            type: String\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            date: null,\n            dateFormatted: null,\n            dateInvalid: false,\n            time: null,\n            timeFormatted: null,\n            dialogDate: false,\n            dialogTime: false,\n            reverseDateFormatObj: {\n                'DD/MM/YYYY': 'YYYY-MM-DD',\n                'MM/DD/YYYY': 'YYYY-DD-MM'\n            },\n            focus: false\n        }\n    },\n    computed: {\n        reverseDateFormat() {\n            return this.reverseDateFormatObj[this.dateFormat]\n        },\n        currentLanguage() {\n            return this.$vuetify.lang.current\n        },\n        checkDate() {\n            if (this.focus) {\n                return this.validateDate\n            }\n            return {\n                required: this.isRequired,\n                date_format: this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n            }\n        },\n        validateDate() {\n            const validationDate = {}\n\n            if(this.isRequired) {\n                validationDate.required = true\n            }\n\n            if(this.dateFormatted && this.dateFormatted.length === 10) {\n                validationDate.date_format = this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n\n                if(this.maxDate) {\n                    validationDate.before = this.moment(this.maxDate)\n                        .add(1, 'days')\n                        .format(this.dateFormat)\n                }\n\n                if(this.minDate) {\n                    validationDate.after = this.moment(this.minDate)\n                        .subtract(1, 'days')\n                        .format(this.dateFormat)\n                }\n            }\n            return validationDate\n        }\n    },\n    watch: {\n        value: {\n            handler(val) {\n                this.updateDateTimeByModel(val)\n                this.updateValue(val)\n            },\n            immediate: true\n        },\n        limparData(val) {\n            if (val) {\n                this.dateFormatted = null\n            }\n        }\n    },\n    mounted() {\n        this.alterTabIndexFromAppendButtons()\n    },\n    methods: {\n        getFormattedDate(day, month, year) {\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return `${day}/${month}/${year}`\n                },\n                'MM/DD/YYYY': function() {\n                    return `${month}/${day}/${year}`\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        formatDate(date) {\n            if (!date) return null\n\n            const [year, month, day] = date.split('-')\n            return this.getFormattedDate(day, month, year)\n        },\n        pickDateEvent() {\n            this.dialogDate = false\n        },\n        validateAndParseDate(date) {\n            if (!date || !this.dateStringIsValid(date) || this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date)) {\n                if ((date && this.dateStringIsValid(date)) && (this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date))) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    return\n                }\n                if(date === null || date.length === 0) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    this.$emit('input', null)\n                }\n                return\n            }\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            this.date = `${dateObj.year}-${dateObj.month}-${dateObj.day}`\n            this.updateModelDate(this.date)\n        },\n        getDayMonthYearFromDateString(date) {\n            const dateFormated = date.replace(new RegExp('/', 'g'), '')\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(0, 2),\n                        month: dateFormated.substring(2, 4),\n                        year: dateFormated.substring(4, 8)\n                    }\n                },\n                'MM/DD/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(2, 4),\n                        month: dateFormated.substring(0, 2),\n                        year: dateFormated.substring(4, 8)\n                    }\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        dayIsValidForMonthAndYear(day, month, year) {\n            let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            const isLeapYear = (!(year % 4) && year % 100) || !(year % 400)\n\n            if (isLeapYear) {\n                daysInMonth[1] = 29\n            }\n\n            return day > 0 && day <= daysInMonth[--month]\n        },\n        dateStringIsValid(date) {\n            if (date.length < 8) return false\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            const monthIsValid = Number(dateObj.month) > 0 && Number(dateObj.month) < 13\n            const yearIsValid = Number(dateObj.year) > 999\n\n            if (!monthIsValid || !yearIsValid) return false\n\n            return this.dayIsValidForMonthAndYear(Number(dateObj.day), Number(dateObj.month), Number(dateObj.year))\n        },\n        timeStringIsValid() {\n            if (!this.timeFormatted || this.timeFormatted.length < 4) return false\n\n            const firstTimeDigit = Number(this.timeFormatted.substring(0, 2))\n            const secondTimeDigit = Number(this.timeFormatted.substring(2, 4))\n\n            return firstTimeDigit < 24 && secondTimeDigit < 60\n        },\n        validateTimeEvent() {\n            if (!this.timeStringIsValid()) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            }\n\n            const hour = this.timeFormatted.substring(0, 2)\n            const minute = this.timeFormatted.substring(2, 4)\n\n            this.time = hour + ':' + minute\n        },\n        changeTimeEvent() {\n            this.timeFormatted = this.time.replace(':', '')\n            this.$refs.menu.save(this.time)\n        },\n        openMenuDate() {\n            this.dialogDate = true\n        },\n        openMenuTime() {\n            this.dialogTime = true\n        },\n        setEmptyTimeAndDate() {\n            this.time = null\n            this.timeFormatted = ''\n            this.date = null\n            this.dateFormatted = ''\n        },\n        updateModelDate(value) {\n            this.dateInvalid = false\n            if (this.time && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, this.time)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.time && !value) {\n                this.$emit('input', value)\n                return\n            }\n            if (!this.time && !value) {\n                this.$emit('input', null)\n                return\n            }\n            if (!this.time) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, '00:00')\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                this.selectContentInputHour()\n            }\n        },\n        updateModelTime(value) {\n            if (this.date && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(this.date, value)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.date && !value) this.$emit('input', this.date)\n        },\n        updateDateTimeByModel(modelVal) {\n            const maxLengthOfModelDateWithTime = 28\n\n            if (!modelVal || modelVal.length > maxLengthOfModelDateWithTime) {\n                this.setEmptyTimeAndDate()\n                return\n            }\n\n            if (this.dateTime) this.updateDateWithTimeByModel(modelVal)\n            else this.updateDateWithoutTimeByModel(modelVal)\n        },\n        updateDateWithTimeByModel(modelVal) {\n            const maxLengthOfModel = 28,\n                dateModelLength = 10,\n                dateModelWithSeparatorLength = 11\n\n            if (modelVal.length > dateModelWithSeparatorLength && modelVal.length < maxLengthOfModel) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            } else if (modelVal && modelVal.length < dateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length === dateModelLength) {\n                this.date = modelVal\n                this.dateFormatted = this.formatDate(modelVal)\n            } else if (modelVal.length === maxLengthOfModel) {\n                const dateTime = this.getDateTimeWithSystemTimezone(modelVal)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.changeTimeEvent()\n            }\n        },\n        updateDateWithoutTimeByModel(modelVal) {\n            const maxDateModelLength = 10\n\n            if (modelVal.length < maxDateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length >= maxDateModelLength) {\n                this.date = modelVal.substring(0, maxDateModelLength)\n                this.dateFormatted = this.formatDate(this.date)\n            }\n        },\n        getDateTimeWithSystemTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        getDateTimeZeroTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        buildDateTimeWithTimezone(date, time) {\n            const seconds = '00'\n            const dateTime = date + 'T' + time + ':' + seconds\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return dateTime + offset\n        },\n        getOffsetFromCurrentDateTime(dateTime) {\n            return this.moment(dateTime)\n                .tz(this.$store.state.loki.timezone)\n                .format('Z')\n        },\n        selectContentInputHour() {\n            this.$nextTick(() => {\n                const input = document.getElementsByName(this.nameHour)[0]\n                if (input) {\n                    input.setSelectionRange(0, 5)\n                }\n            })\n        },\n        updateValue(val) {\n            if (val) {\n                const dateTime = this.getDateTimeWithSystemTimezone(val)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.timeFormatted = this.time.replace(':', '')\n            }\n        },\n        dateMinIsAllowed(date) {\n            if (this.minDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const minDateObj = this.getDayMonthYearFromDateString(this.moment(this.minDate).format('DD/MM/YYYY'))\n                return this.moment(this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`))\n                    .isBefore(this.moment(`${minDateObj.year}-${minDateObj.month}-${minDateObj.day}`))\n            }\n            return false\n        },\n        dateMaxIsAllowed(date) {\n            if (this.maxDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const maxDateObj = this.getDayMonthYearFromDateString(this.moment(this.maxDate).format('DD/MM/YYYY'))\n                return this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`)\n                    .isAfter(this.moment(`${maxDateObj.year}-${maxDateObj.month}-${maxDateObj.day}`))\n            }\n            return false\n        },\n        alterTabIndexFromAppendButtons() {\n            const bottonsDate = document.querySelectorAll('.az-date-date-input .v-input__append-inner .v-icon')\n            bottonsDate.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n            const bottonsTime = document.querySelectorAll('.az-date-time-input .v-input__append-inner .v-icon')\n            bottonsTime.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n        },\n        changeFocus(event) {\n            if (event.type === 'focus') {\n                this.focus = true\n            } else if (event.type === 'blur') {\n                this.focus = false\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"stylus\">\n.az-date\n    .v-picker__title\n        padding 10px 15px\n\n    .v-date-picker-title__date\n        font-size 20px\n\n    .v-time-picker-title__time .v-picker__title__btn, .v-time-picker-title__time span\n        font-size 40px\n        height 50px\n\n    .v-time-picker-title\n        -webkit-box-pack center\n        -ms-flex-pack center\n        justify-content center\n</style>\n"],"sourceRoot":"node_modules/@azinformatica/loki/src/components/form"}]}