{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/camposEditaveis/campo-de-arquivo-novo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/camposEditaveis/campo-de-arquivo-novo.vue","mtime":1614049852953},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: 'campo-de-arquivo-novo',\n    props: {\n        value: {\n            required: true\n        },\n        name: {\n            required: true,\n            type: String\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        labelBtnSave: {\n            type: String,\n            default: 'Salvar'\n        },\n        labelBtnCancel: {\n            type: String,\n            default: 'Cancelar'\n        },\n        labelBtnEdit: {\n            type: String,\n            default: 'Editar'\n        },\n        maxlength: {\n            type: Number,\n            default: 255\n        },\n        validate: {\n            type: String,\n            default: 'required'\n        },\n        counter: {\n            type: Number\n        },\n        placeholder: {\n            type: String\n        }\n    },\n    $_veeValidate: {\n        validator: 'new'\n    },\n    data: () => ({\n        model: undefined,\n        editing: true,\n        errorObrigatoriedadeAnexo: 0,\n        errorTamanhoExcedido: 0,\n    }),\n    watch: {\n        value(val) {\n            this.model = val\n        }\n    },\n\n    methods: {\n        startEdit() {\n            this.model = null\n            this.editing = true\n        },\n        async submitEdit() {\n            const anexo = this.model\n            if (anexo) {\n                if (this.extensaoArquivoValida(anexo) === -1) {\n                    this.mostrarNotificacaoErro('Extensão do arquivo inválida. Envie arquivos nos seguintes formatos .pdf .jpg .png')\n                    this.model = null\n                } else {\n                    if (this.validarTamanhoMaximo(anexo.size)) {\n                        this.errorTamanhoExcedido = 1\n                        this.model = await null\n                        setTimeout(() => {\n                            this.errorTamanhoExcedido = 0\n                            this.errorObrigatoriedadeAnexo = 1\n                            this.$validator._base.validateAll()\n                        }, 3000)\n\n                    } else {\n                        this.editing = false\n                        this.$emit('input', anexo)\n                    }\n                }\n            }\n        },\n        validarTamanhoMaximo(tamanhoAnexo) {\n            return tamanhoAnexo >= 15116247\n\n        },\n        extensaoArquivoValida(nomeArquivo) {\n            const extensaoAceitas = ['.pdf', '.PDF', '.jpg', '.JPG', '.png', '.PNG', '.jpeg', '.JPEG']\n            const extensao = nomeArquivo.name.substr(nomeArquivo.name.lastIndexOf('.'), nomeArquivo.name.length)\n            return extensaoAceitas.indexOf(extensao)\n        },\n    }\n}\n",{"version":3,"sources":["campo-de-arquivo-novo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"campo-de-arquivo-novo.vue","sourceRoot":"src/views/components/camposEditaveis","sourcesContent":["<template>\n    <div class=\"ajusteInput campo-input-edit\">\n        <div v-if=\"!editing\">\n            <v-text-field\n                v-if=\"typeof value === 'string'\"\n                readonly\n                clearable\n                v-model=\"value.split('/')[1]\"\n                :label=\"label\"\n                @click:clear=\"startEdit\"\n            />\n        </div>\n        <div :class=\"{'pt-7' : editing}\">\n            <v-file-input\n                v-model=\"model\"\n                v-show=\"editing\"\n                class=\"file-input-component\"\n                dense\n                outlined\n                append-icon=\"fa-file-upload\"\n                :label=\"label\"\n                :name=\"name\"\n                prepend-icon\n                :maxlength=\"maxlength\"\n                :error-messages=\"errorTamanhoExcedido ===1 ? 'Tamanho permitido: 15MB' : errors.collect(name)\"\n                v-validate=\"validate\"\n                :counter=\"counter\"\n                :placeholder=\"placeholder\"\n                :clearable=\"false\"\n                @change=\"submitEdit\"/>\n            <span class=\"tamanhoPermitidoClassInput\"\n                  v-if=\"!this.model && errorTamanhoExcedido!==1 && errorObrigatoriedadeAnexo!==1\">Tamanho permitido: 15MB</span>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'campo-de-arquivo-novo',\n        props: {\n            value: {\n                required: true\n            },\n            name: {\n                required: true,\n                type: String\n            },\n            label: {\n                type: String,\n                default: ''\n            },\n            labelBtnSave: {\n                type: String,\n                default: 'Salvar'\n            },\n            labelBtnCancel: {\n                type: String,\n                default: 'Cancelar'\n            },\n            labelBtnEdit: {\n                type: String,\n                default: 'Editar'\n            },\n            maxlength: {\n                type: Number,\n                default: 255\n            },\n            validate: {\n                type: String,\n                default: 'required'\n            },\n            counter: {\n                type: Number\n            },\n            placeholder: {\n                type: String\n            }\n        },\n        $_veeValidate: {\n            validator: 'new'\n        },\n        data: () => ({\n            model: undefined,\n            editing: true,\n            errorObrigatoriedadeAnexo: 0,\n            errorTamanhoExcedido: 0,\n        }),\n        watch: {\n            value(val) {\n                this.model = val\n            }\n        },\n\n        methods: {\n            startEdit() {\n                this.model = null\n                this.editing = true\n            },\n            async submitEdit() {\n                const anexo = this.model\n                if (anexo) {\n                    if (this.extensaoArquivoValida(anexo) === -1) {\n                        this.mostrarNotificacaoErro('Extensão do arquivo inválida. Envie arquivos nos seguintes formatos .pdf .jpg .png')\n                        this.model = null\n                    } else {\n                        if (this.validarTamanhoMaximo(anexo.size)) {\n                            this.errorTamanhoExcedido = 1\n                            this.model = await null\n                            setTimeout(() => {\n                                this.errorTamanhoExcedido = 0\n                                this.errorObrigatoriedadeAnexo = 1\n                                this.$validator._base.validateAll()\n                            }, 3000)\n\n                        } else {\n                            this.editing = false\n                            this.$emit('input', anexo)\n                        }\n                    }\n                }\n            },\n            validarTamanhoMaximo(tamanhoAnexo) {\n                return tamanhoAnexo >= 15116247\n\n            },\n            extensaoArquivoValida(nomeArquivo) {\n                const extensaoAceitas = ['.pdf', '.PDF', '.jpg', '.JPG', '.png', '.PNG', '.jpeg', '.JPEG']\n                const extensao = nomeArquivo.name.substr(nomeArquivo.name.lastIndexOf('.'), nomeArquivo.name.length)\n                return extensaoAceitas.indexOf(extensao)\n            },\n        }\n    }\n</script>\n\n<style lang=\"stylus\">\n    .ajusteInput\n        width 180px\n        margin-top 14px\n        margin-left -6px\n\n    .file-input-component\n        font-size 13px\n\n        .v-text-field__details\n            margin-bottom 0px\n\n    .tamanhoPermitidoClassInput\n        color #a5a5a5\n        margin 0px\n        font-size 12px\n</style>\n"]}]}