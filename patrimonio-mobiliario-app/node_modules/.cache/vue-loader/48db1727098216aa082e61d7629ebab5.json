{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/listagem/IncorporacaoListagem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/listagem/IncorporacaoListagem.vue","mtime":1616000736864},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\nimport {actionTypes, mutationTypes} from '@/core/constants'\nimport BotaoNovo from '@/views/components/botoes/BotaoNovo'\nimport IncorporacaoListagemTabela from './IncorporacaoListagemTabela'\nimport {createNamespacedHelpers, mapActions, mapMutations, mapState} from 'vuex'\nimport AzHasPermissions from '@azinformatica/loki/src/utils/AzHasPermissions'\n\nconst {mapGetters} = createNamespacedHelpers('rotulosPersonalizados')\nexport default {\n    name: 'IncorporacaoListagem',\n    components: {BotaoNovo, IncorporacaoListagemTabela},\n    data() {\n        return {\n            filtrosInterno: this.getFiltros(),\n            itens: [],\n            paginas: 0,\n            totalItens: 0,\n            nomeTela: 'INCORPORACAO_DADOS_GERAIS',\n            loading: false,\n        }\n    },\n    computed: {\n        ...mapState({todasIncorporacoes: state => state.incorporacao.resultadoBuscaTodasIncorporacoes}),\n        verificarPermissaoEdicao() {\n            return AzHasPermissions(this.$store.state.loki.user.authorities, ['Mobiliario.Normal'])\n        },\n        ...mapGetters([\n            'getIncorporacaoValidado',\n        ]),\n    },\n    methods: {\n        ...mapActions([\n            actionTypes.PATRIMONIO.INCORPORACAO.BUSCAR_TODAS_INCORPORACOES,\n            actionTypes.PATRIMONIO.INCORPORACAO.CADASTRAR_INCORPORACAO,\n            actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.BUSCAR_TODOS_EMPENHOS,\n            actionTypes.PATRIMONIO.INCORPORACAO.INCORPORACAO_ITEM.BUSCAR_TODOS_ITENS_INCORPORACAO,\n        ]),\n        ...mapMutations([\n            mutationTypes.PATRIMONIO.INCORPORACAO.SET_FILTROS_BUSCA_TODAS_INCORPORACOES,\n            mutationTypes.PATRIMONIO.INCORPORACAO.SET_PAGINACAO_BUSCA_TODAS_INCORPORACOES,\n            mutationTypes.PATRIMONIO.INCORPORACAO.RESETA_PAGE_INCORPORACAO,\n        ]),\n        async buscar() {\n            this.setFiltrosBuscaTodasIncorporacoes(this.getFiltrosInterno())\n            await this.buscaTodasIncorporacoes()\n        },\n        async buscaTodasIncorporacoes() {\n            const resultado = await this.buscarTodasIncorporacoes()\n            if (resultado) {\n                this.itens = resultado.items\n                this.paginas = resultado.totalPages\n                this.totalItens = resultado.totalElements\n            }\n        },\n        getFiltros() {\n            return _.cloneDeep(this.$store.state.incorporacao.resultadoBuscaTodasIncorporacoes.filtros)\n        },\n        getFiltrosInterno() {\n            return _.cloneDeep(this.filtrosInterno)\n        },\n        async tratarEventoAcessar(item) {\n            if (item.situacao !== 'EM_PROCESSAMENTO') {\n                if (item.situacao === 'EM_ELABORACAO') {\n                    await this.tratarRedirecionamentosParaItemSituacaoEmElaboracao(item)\n                } else {\n                    this.tratarRedirecionamentosParaItemSituacaoDiferenteDeElaboracao(item)\n                }\n            }\n        },\n        async tratarRedirecionamentosParaItemSituacaoEmElaboracao(item) {\n            if (await this.verificaSeCamposObrigatoriosPreenchidos(item)) {\n                if (await this.buscarItensIncorporacao(item.id)) {\n                    this.verificarRotaIncorproacaoDocumentos(item.id)\n                } else {\n                    this.verificarRotaItensIncorporacaoListagem(item.id)\n                }\n            } else {\n                this.verificarRotaIncorporacao(item.id)\n            }\n        },\n        tratarRedirecionamentosParaItemSituacaoDiferenteDeElaboracao(item) {\n            if (item.situacao === 'ERRO_PROCESSAMENTO') {\n                this.verificarRotaIncorporacao(item.id)\n            } else {\n                this.verificarRotaVisualizacaoRegistro(item.id)\n            }\n        },\n        verificarRotaVisualizacaoRegistro(id) {\n            if (this.verificarPermissaoEdicao) {\n                this.$router.push({name: 'VisualizarRegistroIncorporacao', params: {incorporacaoId: id}})\n            } else {\n                this.$router.push({name: 'VisualizarRegistroIncorporacaoVisualizacao', params: {incorporacaoId: id}})\n            }\n        },\n        verificarRotaIncorproacaoDocumentos(id) {\n            if (this.verificarPermissaoEdicao) {\n                this.$router.push({name: 'IncorporacaoDocumentosEdicao', params: {incorporacaoId: id}})\n            } else {\n                this.$router.push({name: 'VisualizarIncorporacaoDocumentos', params: {incorporacaoId: id}})\n            }\n        },\n        verificarRotaItensIncorporacaoListagem(id) {\n            if (this.verificarPermissaoEdicao) {\n                this.$router.push({name: 'ItensIncorporacaoListagem', params: {incorporacaoId: id}})\n            } else {\n                this.$router.push({name: 'VisualizarItensIncorporacao', params: {incorporacaoId: id}})\n            }\n        },\n        verificarRotaIncorporacao(id) {\n            if (this.verificarPermissaoEdicao) {\n                this.$router.push({name: 'EditarIncorporacao', params: {incorporacaoId: id}})\n            } else {\n                this.$router.push({name: 'VisualizarIncorporacao', params: {incorporacaoId: id}})\n            }\n        },\n        async verificaSeCamposObrigatoriosPreenchidos(item) {\n            if (item && item.reconhecimento) {\n                if (this.empenhoObrigatorio(item)) {\n                    if (!await this.verificarSeTodosEmpenhosObrigatoriosEstaoPreenchidos(item)) {\n                        return false\n                    }\n                }\n                return this.getIncorporacaoValidado(item, item.origemConvenio, item.origemFundo,\n                                                    item.origemProjeto, item.origemComodato,\n                                                    this.notaObrigatorio(item), this.nomeTela)\n            }\n            return false\n        },\n        async buscarItensIncorporacao(id) {\n            const resultado = await this.buscarTodosItensIncorporacao(id)\n            if (resultado) {\n                return (resultado.totalElements > 0)\n            }\n            return false\n        },\n        empenhoObrigatorio(item) {\n            return item.reconhecimento.empenho\n        },\n        notaObrigatorio(item) {\n            return item.reconhecimento.notaFiscal\n        },\n        async verificarSeTodosEmpenhosObrigatoriosEstaoPreenchidos(item) {\n            const empenhos = await this.buscaEmpenhos(item.id)\n            if (empenhos.length === 0) {\n                return !this.empenhoObrigatorio(item)\n            }\n            return empenhos.every(empenho => empenho.numeroEmpenho && empenho.dataEmpenho && empenho.valorEmpenho && empenho.valorEmpenho !== 0)\n        },\n        async buscaEmpenhos(incorporacaoId) {\n            let empenhos = []\n            const resultado = await this.buscarTodosEmpenhos(incorporacaoId)\n            if (resultado && resultado.items.length > 0) {\n                empenhos = resultado.items\n            }\n            return empenhos\n        },\n        async tratarEventoBuscaSimples(valor) {\n            this.resetaPageIncorporacao()\n            this.filtrosInterno.conteudo.value = valor\n            await this.buscar()\n        },\n        async tratarEventoNovaIncorporacao() {\n            const incorporacaoSalva = await this.cadastrarIncorporacao()\n            await this.$router.push({name: 'EditarIncorporacao', params: {incorporacaoId: incorporacaoSalva.id}})\n        },\n        async tratarEventoPaginar(paginacao) {\n            this.setPaginacaoBuscaTodasIncorporacoes(paginacao)\n            this.verificarOrdenacao(paginacao)\n            await this.buscar()\n        },\n        async tratarEventoRemoverFiltro(propriedade) {\n            if (this.filtrosInterno[propriedade]) {\n                this.filtrosInterno[propriedade].value = this.filtrosInterno[propriedade].default\n            }\n            await this.buscar()\n        },\n        verificarOrdenacao(paginacao) {\n            if (!this.todasIncorporacoes.paginacao.sortBy[0]) {\n                this.todasIncorporacoes.paginacao.sortBy[0] = paginacao.defaultSortBy\n            }\n        },\n    },\n}\n",{"version":3,"sources":["IncorporacaoListagem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"IncorporacaoListagem.vue","sourceRoot":"src/views/pages/patrimonios/incorporacao/listagem","sourcesContent":["<template>\n    <div>\n        <az-toolbar>\n            <botao-novo\n                slot=\"actions\"\n                :disabled=\"!verificarPermissaoEdicao\"\n                @click=\"tratarEventoNovaIncorporacao\"\n            />\n            <v-col slot=\"simpleSearch\">\n                <az-search\n                    id=\"azSearch\"\n                    :filter=\"filtrosInterno\"\n                    :maxlength-input=\"500\"\n                    class=\"searchIncorporacaoListagem\"\n                    simple-search-placeholder=\"Busque por: código, fornecedor, órgão ou situação\"\n                    @remove-filter=\"tratarEventoRemoverFiltro\"\n                    @simple-search=\"tratarEventoBuscaSimples\"\n                />\n            </v-col>\n        </az-toolbar>\n        <incorporacao-listagem-tabela\n            :itens=\"itens\"\n            :paginacao=\"todasIncorporacoes.paginacao\"\n            :paginas=\"paginas\"\n            :total-itens=\"totalItens\"\n            @acessar=\"tratarEventoAcessar\"\n            @paginar=\"tratarEventoPaginar\"\n        />\n    </div>\n</template>\n\n<script>\n    import _ from 'lodash'\n    import {actionTypes, mutationTypes} from '@/core/constants'\n    import BotaoNovo from '@/views/components/botoes/BotaoNovo'\n    import IncorporacaoListagemTabela from './IncorporacaoListagemTabela'\n    import {createNamespacedHelpers, mapActions, mapMutations, mapState} from 'vuex'\n    import AzHasPermissions from '@azinformatica/loki/src/utils/AzHasPermissions'\n\n    const {mapGetters} = createNamespacedHelpers('rotulosPersonalizados')\n    export default {\n        name: 'IncorporacaoListagem',\n        components: {BotaoNovo, IncorporacaoListagemTabela},\n        data() {\n            return {\n                filtrosInterno: this.getFiltros(),\n                itens: [],\n                paginas: 0,\n                totalItens: 0,\n                nomeTela: 'INCORPORACAO_DADOS_GERAIS',\n                loading: false,\n            }\n        },\n        computed: {\n            ...mapState({todasIncorporacoes: state => state.incorporacao.resultadoBuscaTodasIncorporacoes}),\n            verificarPermissaoEdicao() {\n                return AzHasPermissions(this.$store.state.loki.user.authorities, ['Mobiliario.Normal'])\n            },\n            ...mapGetters([\n                'getIncorporacaoValidado',\n            ]),\n        },\n        methods: {\n            ...mapActions([\n                actionTypes.PATRIMONIO.INCORPORACAO.BUSCAR_TODAS_INCORPORACOES,\n                actionTypes.PATRIMONIO.INCORPORACAO.CADASTRAR_INCORPORACAO,\n                actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.BUSCAR_TODOS_EMPENHOS,\n                actionTypes.PATRIMONIO.INCORPORACAO.INCORPORACAO_ITEM.BUSCAR_TODOS_ITENS_INCORPORACAO,\n            ]),\n            ...mapMutations([\n                mutationTypes.PATRIMONIO.INCORPORACAO.SET_FILTROS_BUSCA_TODAS_INCORPORACOES,\n                mutationTypes.PATRIMONIO.INCORPORACAO.SET_PAGINACAO_BUSCA_TODAS_INCORPORACOES,\n                mutationTypes.PATRIMONIO.INCORPORACAO.RESETA_PAGE_INCORPORACAO,\n            ]),\n            async buscar() {\n                this.setFiltrosBuscaTodasIncorporacoes(this.getFiltrosInterno())\n                await this.buscaTodasIncorporacoes()\n            },\n            async buscaTodasIncorporacoes() {\n                const resultado = await this.buscarTodasIncorporacoes()\n                if (resultado) {\n                    this.itens = resultado.items\n                    this.paginas = resultado.totalPages\n                    this.totalItens = resultado.totalElements\n                }\n            },\n            getFiltros() {\n                return _.cloneDeep(this.$store.state.incorporacao.resultadoBuscaTodasIncorporacoes.filtros)\n            },\n            getFiltrosInterno() {\n                return _.cloneDeep(this.filtrosInterno)\n            },\n            async tratarEventoAcessar(item) {\n                if (item.situacao !== 'EM_PROCESSAMENTO') {\n                    if (item.situacao === 'EM_ELABORACAO') {\n                        await this.tratarRedirecionamentosParaItemSituacaoEmElaboracao(item)\n                    } else {\n                        this.tratarRedirecionamentosParaItemSituacaoDiferenteDeElaboracao(item)\n                    }\n                }\n            },\n            async tratarRedirecionamentosParaItemSituacaoEmElaboracao(item) {\n                if (await this.verificaSeCamposObrigatoriosPreenchidos(item)) {\n                    if (await this.buscarItensIncorporacao(item.id)) {\n                        this.verificarRotaIncorproacaoDocumentos(item.id)\n                    } else {\n                        this.verificarRotaItensIncorporacaoListagem(item.id)\n                    }\n                } else {\n                    this.verificarRotaIncorporacao(item.id)\n                }\n            },\n            tratarRedirecionamentosParaItemSituacaoDiferenteDeElaboracao(item) {\n                if (item.situacao === 'ERRO_PROCESSAMENTO') {\n                    this.verificarRotaIncorporacao(item.id)\n                } else {\n                    this.verificarRotaVisualizacaoRegistro(item.id)\n                }\n            },\n            verificarRotaVisualizacaoRegistro(id) {\n                if (this.verificarPermissaoEdicao) {\n                    this.$router.push({name: 'VisualizarRegistroIncorporacao', params: {incorporacaoId: id}})\n                } else {\n                    this.$router.push({name: 'VisualizarRegistroIncorporacaoVisualizacao', params: {incorporacaoId: id}})\n                }\n            },\n            verificarRotaIncorproacaoDocumentos(id) {\n                if (this.verificarPermissaoEdicao) {\n                    this.$router.push({name: 'IncorporacaoDocumentosEdicao', params: {incorporacaoId: id}})\n                } else {\n                    this.$router.push({name: 'VisualizarIncorporacaoDocumentos', params: {incorporacaoId: id}})\n                }\n            },\n            verificarRotaItensIncorporacaoListagem(id) {\n                if (this.verificarPermissaoEdicao) {\n                    this.$router.push({name: 'ItensIncorporacaoListagem', params: {incorporacaoId: id}})\n                } else {\n                    this.$router.push({name: 'VisualizarItensIncorporacao', params: {incorporacaoId: id}})\n                }\n            },\n            verificarRotaIncorporacao(id) {\n                if (this.verificarPermissaoEdicao) {\n                    this.$router.push({name: 'EditarIncorporacao', params: {incorporacaoId: id}})\n                } else {\n                    this.$router.push({name: 'VisualizarIncorporacao', params: {incorporacaoId: id}})\n                }\n            },\n            async verificaSeCamposObrigatoriosPreenchidos(item) {\n                if (item && item.reconhecimento) {\n                    if (this.empenhoObrigatorio(item)) {\n                        if (!await this.verificarSeTodosEmpenhosObrigatoriosEstaoPreenchidos(item)) {\n                            return false\n                        }\n                    }\n                    return this.getIncorporacaoValidado(item, item.origemConvenio, item.origemFundo,\n                                                        item.origemProjeto, item.origemComodato,\n                                                        this.notaObrigatorio(item), this.nomeTela)\n                }\n                return false\n            },\n            async buscarItensIncorporacao(id) {\n                const resultado = await this.buscarTodosItensIncorporacao(id)\n                if (resultado) {\n                    return (resultado.totalElements > 0)\n                }\n                return false\n            },\n            empenhoObrigatorio(item) {\n                return item.reconhecimento.empenho\n            },\n            notaObrigatorio(item) {\n                return item.reconhecimento.notaFiscal\n            },\n            async verificarSeTodosEmpenhosObrigatoriosEstaoPreenchidos(item) {\n                const empenhos = await this.buscaEmpenhos(item.id)\n                if (empenhos.length === 0) {\n                    return !this.empenhoObrigatorio(item)\n                }\n                return empenhos.every(empenho => empenho.numeroEmpenho && empenho.dataEmpenho && empenho.valorEmpenho && empenho.valorEmpenho !== 0)\n            },\n            async buscaEmpenhos(incorporacaoId) {\n                let empenhos = []\n                const resultado = await this.buscarTodosEmpenhos(incorporacaoId)\n                if (resultado && resultado.items.length > 0) {\n                    empenhos = resultado.items\n                }\n                return empenhos\n            },\n            async tratarEventoBuscaSimples(valor) {\n                this.resetaPageIncorporacao()\n                this.filtrosInterno.conteudo.value = valor\n                await this.buscar()\n            },\n            async tratarEventoNovaIncorporacao() {\n                const incorporacaoSalva = await this.cadastrarIncorporacao()\n                await this.$router.push({name: 'EditarIncorporacao', params: {incorporacaoId: incorporacaoSalva.id}})\n            },\n            async tratarEventoPaginar(paginacao) {\n                this.setPaginacaoBuscaTodasIncorporacoes(paginacao)\n                this.verificarOrdenacao(paginacao)\n                await this.buscar()\n            },\n            async tratarEventoRemoverFiltro(propriedade) {\n                if (this.filtrosInterno[propriedade]) {\n                    this.filtrosInterno[propriedade].value = this.filtrosInterno[propriedade].default\n                }\n                await this.buscar()\n            },\n            verificarOrdenacao(paginacao) {\n                if (!this.todasIncorporacoes.paginacao.sortBy[0]) {\n                    this.todasIncorporacoes.paginacao.sortBy[0] = paginacao.defaultSortBy\n                }\n            },\n        },\n    }\n</script>\n<style lang=\"stylus\">\n.searchIncorporacaoListagem .input-search\n    background-color #fff !important\n    width 28vw !important\n\n    span\n        max-width 350px\n\n    .v-chip__content\n        width 100%\n\n        span\n            white-space nowrap\n            overflow hidden\n            text-overflow ellipsis\n\n@media (max-width 1250px)\n    .searchIncorporacaoListagem .input-search\n        background-color #fff !important\n        width 40vw !important\n\n        span\n            max-width 230px\n\n@media (max-width 890px)\n    .searchIncorporacaoListagem .input-search\n        background-color #fff !important\n        width 50vw !important\n\n@media (max-width 720px)\n    .searchIncorporacaoListagem .input-search\n        background-color #fff !important\n        width 55vw !important\n</style>\n"]}]}