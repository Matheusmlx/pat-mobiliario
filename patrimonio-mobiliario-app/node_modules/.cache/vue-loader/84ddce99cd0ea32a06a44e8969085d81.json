{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/edicao/dados-gerais/DadosGerais.vue?vue&type=template&id=f4833200&scoped=true&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/edicao/dados-gerais/DadosGerais.vue","mtime":1615827966844},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"v-form\",\n        { ref: \"form\", staticClass: \"az-form-content pb-0\" },\n        [\n          _c(\n            \"v-container\",\n            { staticClass: \"white form-dados-gerais\", attrs: { fluid: \"\" } },\n            [\n              _c(\n                \"v-row\",\n                [\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-autocomplete\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required\",\n                            expression: \"'required'\"\n                          }\n                        ],\n                        ref: \"autoCompleteReconhecimento\",\n                        attrs: {\n                          name: \"reconhecimento\",\n                          placeholder: \"Selecione o reconhecimento\",\n                          items: _vm.reconhecimentos,\n                          \"item-text\": \"nome\",\n                          \"item-value\": \"id\",\n                          filter: _vm.filtroComboAutoComplete,\n                          \"error-messages\": _vm.errors.collect(\"reconhecimento\")\n                        },\n                        on: { change: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u(\n                          [\n                            {\n                              key: \"label\",\n                              fn: function() {\n                                return [\n                                  _c(\"label-personalizado\", {\n                                    attrs: {\n                                      campo: \"reconhecimento\",\n                                      tela: _vm.nomeTela,\n                                      apresentaTooltip: \"\",\n                                      obrigatorioPorPadrao: \"\"\n                                    }\n                                  })\n                                ]\n                              },\n                              proxy: true\n                            },\n                            {\n                              key: \"item\",\n                              fn: function(data) {\n                                return [\n                                  _c(\n                                    \"label\",\n                                    {\n                                      staticClass:\n                                        \"auto-complete-item-text text-truncate\",\n                                      style: _vm.obterLarguraAutoComplete(\n                                        \"autoCompleteReconhecimento\"\n                                      )\n                                    },\n                                    [_vm._v(_vm._s(data.item.nome))]\n                                  )\n                                ]\n                              }\n                            },\n                            _vm.reconhecimentoInativo\n                              ? {\n                                  key: \"append-outer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"tooltip-campos-inativos\", {\n                                        attrs: {\n                                          mensagem:\n                                            \"Este reconhecimento foi inativado, por favor selecione outro!\"\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              : null\n                          ],\n                          null,\n                          true\n                        ),\n                        model: {\n                          value: _vm.dadosDeEntrada.reconhecimento,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"reconhecimento\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.reconhecimento\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-text-field\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: _vm.getObrigatorioRotulosPersonalizados(\n                              \"numProcesso\",\n                              _vm.nomeTela\n                            )\n                              ? \"required|max:30\"\n                              : \"max:30\",\n                            expression:\n                              \"getObrigatorioRotulosPersonalizados('numProcesso', nomeTela)?'required|max:30' : 'max:30'\"\n                          }\n                        ],\n                        attrs: {\n                          disabled: !this.dadosDeEntrada.reconhecimento,\n                          name: \"número do processo\",\n                          placeholder: \"Informe o número\",\n                          maxlength: \"30\",\n                          \"error-messages\": _vm.errors.collect(\n                            \"número do processo\"\n                          )\n                        },\n                        on: { change: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"numProcesso\",\n                                    tela: _vm.nomeTela\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value: _vm.dadosDeEntrada.numProcesso,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"numProcesso\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.numProcesso\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-autocomplete\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: _vm.getObrigatorioRotulosPersonalizados(\n                              \"fornecedor\",\n                              _vm.nomeTela\n                            )\n                              ? \"required\"\n                              : \"\",\n                            expression:\n                              \"getObrigatorioRotulosPersonalizados('fornecedor', nomeTela)? 'required' : ''\"\n                          }\n                        ],\n                        ref: \"autoCompleteFornecedor\",\n                        staticStyle: { \"max-height\": \"35px\" },\n                        attrs: {\n                          disabled: !this.dadosDeEntrada.reconhecimento,\n                          items: _vm.fornecedores,\n                          loading: _vm.estaBuscandoFornecedores,\n                          \"return-object\": false,\n                          \"search-input\": _vm.buscaFornecedorDinamicamente,\n                          filter: _vm.filtroAutocompleteFornecedores,\n                          \"item-text\": \"cpfCnpj\",\n                          \"item-value\": \"id\",\n                          name: \"CNPJ Fornecedor\",\n                          \"error-messages\": _vm.errors.collect(\n                            \"CNPJ Fornecedor\"\n                          ),\n                          \"no-data-text\":\n                            \"Não há fornecedores com este CPF/CNPJ\",\n                          placeholder: \"Informe a razão social ou o CPF/CNPJ\"\n                        },\n                        on: {\n                          \"update:searchInput\": function($event) {\n                            _vm.buscaFornecedorDinamicamente = $event\n                          },\n                          \"update:search-input\": function($event) {\n                            _vm.buscaFornecedorDinamicamente = $event\n                          },\n                          blur: _vm.editarIncorporacao\n                        },\n                        scopedSlots: _vm._u(\n                          [\n                            {\n                              key: \"label\",\n                              fn: function() {\n                                return [\n                                  _c(\"label-personalizado\", {\n                                    attrs: {\n                                      campo: \"fornecedor\",\n                                      tela: _vm.nomeTela\n                                    }\n                                  })\n                                ]\n                              },\n                              proxy: true\n                            },\n                            {\n                              key: \"item\",\n                              fn: function(data) {\n                                return [\n                                  _c(\n                                    \"span\",\n                                    {\n                                      staticClass: \"text-truncate\",\n                                      style: _vm.obterLarguraAutoComplete(\n                                        \"autoCompleteFornecedor\"\n                                      )\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.formataCnpj(data.item.cpfCnpj)\n                                        ) +\n                                          \" - \" +\n                                          _vm._s(data.item.nome)\n                                      )\n                                    ]\n                                  )\n                                ]\n                              }\n                            },\n                            _vm.fornecedorInativo\n                              ? {\n                                  key: \"append-outer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"tooltip-campos-inativos\", {\n                                        attrs: {\n                                          mensagem:\n                                            \"Este fornecedor foi inativado, por favor selecione outro!\"\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              : null,\n                            _vm.dadosDeEntrada.fornecedor\n                              ? {\n                                  key: \"append\",\n                                  fn: function() {\n                                    return [\n                                      _c(\n                                        \"v-tooltip\",\n                                        {\n                                          attrs: { top: \"\" },\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"activator\",\n                                                fn: function(ref) {\n                                                  var on = ref.on\n                                                  return [\n                                                    _c(\n                                                      \"v-icon\",\n                                                      _vm._g(\n                                                        {\n                                                          staticClass:\n                                                            \"pr-3 pt-1\",\n                                                          attrs: { small: \"\" },\n                                                          on: {\n                                                            click:\n                                                              _vm.removerFornecedor\n                                                          }\n                                                        },\n                                                        on\n                                                      ),\n                                                      [_vm._v(\"fas fa-times\")]\n                                                    )\n                                                  ]\n                                                }\n                                              }\n                                            ],\n                                            null,\n                                            false,\n                                            3325096021\n                                          )\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n                                \" +\n                                              _vm._s(_vm.labelBtnCancel) +\n                                              \"\\n                            \"\n                                          )\n                                        ]\n                                      )\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              : null\n                          ],\n                          null,\n                          true\n                        ),\n                        model: {\n                          value: _vm.dadosDeEntrada.fornecedor,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"fornecedor\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.fornecedor\"\n                        }\n                      }),\n                      _c(\"az-text-view\", {\n                        staticClass: \"mt-2\",\n                        attrs: {\n                          text: _vm.dadosDeEntrada.fornecedor\n                            ? _vm.$options.filters.fornecedorFilter(\n                                _vm.dadosDeEntrada.fornecedor,\n                                _vm.fornecedores\n                              )\n                            : \"\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"empenhoBorder\" },\n                _vm._l(_vm.empenhos, function(empenho, index) {\n                  return _c(\"empenho\", {\n                    key: empenho.id,\n                    attrs: {\n                      value: empenho,\n                      idIncorporacao: _vm.dadosDeEntrada.id,\n                      quantidadeEmpenhos: _vm.empenhos.length,\n                      primeiroEmpenho: index === 0,\n                      obrigatorio: _vm.empenhoObrigatorio,\n                      \"status-reconhecimento\": !_vm.dadosDeEntrada\n                        .reconhecimento\n                    },\n                    on: {\n                      adicionarNovoEmpenho: _vm.adicionarNovoEmpenho,\n                      buscarEmpenhos: _vm.buscaEmpenhos,\n                      removerEmpenho: _vm.removerEmpenho,\n                      atualizarIncorporacao: _vm.editarIncorporacao\n                    }\n                  })\n                }),\n                1\n              ),\n              _c(\n                \"v-row\",\n                [\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-text-field\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: _vm.notaObrigatorio\n                              ? \"required|max:30\"\n                              : \"max:30\",\n                            expression:\n                              \"notaObrigatorio ? 'required|max:30' : 'max:30'\"\n                          }\n                        ],\n                        attrs: {\n                          disabled: !this.dadosDeEntrada.reconhecimento,\n                          name: \"número da nota\",\n                          placeholder: \"Informe o número\",\n                          maxlength: \"30\",\n                          \"error-messages\": _vm.errors.collect(\"número da nota\")\n                        },\n                        on: { change: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"nota\",\n                                    tela: _vm.nomeTela,\n                                    permissaoEdicao: _vm.notaObrigatorio,\n                                    obrigatorioPorPadrao: \"\"\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value: _vm.dadosDeEntrada.nota,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"nota\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.nota\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"az-date\", {\n                        attrs: {\n                          \"is-disabled\": !this.dadosDeEntrada.reconhecimento,\n                          \"name-date\": \"data nota\",\n                          date: \"\",\n                          \"is-required\": _vm.notaObrigatorio,\n                          \"max-date\": _vm\n                            .moment(new Date())\n                            .format(\"YYYY-MM-DDTHH:mm:ssZZ\"),\n                          placeholderDate: _vm.dadosDeEntrada.dataNota\n                            ? \" \"\n                            : _vm.placeholders.date,\n                          \"error-messages\": _vm.errors.collect(\"data nota\")\n                        },\n                        on: { input: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label-date\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"dataNota\",\n                                    tela: _vm.nomeTela,\n                                    permissaoEdicao: _vm.notaObrigatorio,\n                                    obrigatorioPorPadrao: \"\"\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value: _vm.dadosDeEntrada.dataNota,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"dataNota\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.dataNota\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _vm.dadosDeEntrada.id\n                        ? _c(\"az-money\", {\n                            staticClass: \"botaoExcluirMoney\",\n                            attrs: {\n                              maxLength: 18,\n                              \"event-submit\": \"blur\",\n                              required: _vm.notaObrigatorio,\n                              disabled: !this.dadosDeEntrada.reconhecimento,\n                              placeholder: \"Informe o valor\"\n                            },\n                            on: {\n                              input: function($event) {\n                                return _vm.atualizarValorInserido($event)\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"label\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"label-personalizado\", {\n                                        attrs: {\n                                          campo: \"valorNota\",\n                                          tela: _vm.nomeTela,\n                                          permissaoEdicao: _vm.notaObrigatorio,\n                                          obrigatorioPorPadrao: \"\"\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              false,\n                              2899871725\n                            ),\n                            model: {\n                              value: _vm.dadosDeEntrada.valorNota,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dadosDeEntrada, \"valorNota\", $$v)\n                              },\n                              expression: \"dadosDeEntrada.valorNota\"\n                            }\n                          })\n                        : _vm._e()\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"v-row\",\n                [\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-autocomplete\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required\",\n                            expression: \"'required'\"\n                          }\n                        ],\n                        ref: \"autoCompleteOrgao\",\n                        attrs: {\n                          \"item-text\": \"descricao\",\n                          \"item-value\": \"id\",\n                          \"no-data-text\": \"Não há órgãos com este nome\",\n                          name: \"orgaoResponsavel\",\n                          items: _vm.orgaos,\n                          disabled: !this.dadosDeEntrada.reconhecimento,\n                          placeholder: \"Selecione o órgão responsável\",\n                          filter: _vm.filtroComboAutoComplete,\n                          \"error-messages\": !_vm.dadosDeEntrada.orgao\n                            ? _vm.errors.collect(\"orgaoResponsavel\")\n                            : \"\"\n                        },\n                        on: { change: _vm.selecionaOrgao },\n                        scopedSlots: _vm._u(\n                          [\n                            {\n                              key: \"label\",\n                              fn: function() {\n                                return [\n                                  _c(\"label-personalizado\", {\n                                    attrs: {\n                                      campo: \"orgao\",\n                                      tela: _vm.nomeTela,\n                                      obrigatorioPorPadrao: \"\"\n                                    }\n                                  })\n                                ]\n                              },\n                              proxy: true\n                            },\n                            {\n                              key: \"item\",\n                              fn: function(data) {\n                                return [\n                                  _c(\n                                    \"label\",\n                                    {\n                                      staticClass:\n                                        \"uo__autocomplete text-truncate\",\n                                      style: _vm.obterLarguraAutoComplete(\n                                        \"autoCompleteOrgao\"\n                                      )\n                                    },\n                                    [_vm._v(_vm._s(data.item.descricao))]\n                                  )\n                                ]\n                              }\n                            },\n                            _vm.orgaoInativo\n                              ? {\n                                  key: \"append-outer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"tooltip-campos-inativos\", {\n                                        attrs: {\n                                          mensagem:\n                                            \"Este órgão foi inativado, por favor selecione outro!\"\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              : null\n                          ],\n                          null,\n                          true\n                        ),\n                        model: {\n                          value: _vm.dadosDeEntrada.orgao,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"orgao\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.orgao\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-autocomplete\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: _vm.dadosDeEntrada.orgao ? \"required\" : \"\",\n                            expression: \"dadosDeEntrada.orgao ? 'required' : ''\"\n                          }\n                        ],\n                        ref: \"autoCompleteSetor\",\n                        attrs: {\n                          \"item-text\": \"descricao\",\n                          \"item-value\": \"id\",\n                          name: \"setor\",\n                          \"no-data-text\": \"Não há setores com este nome\",\n                          placeholder: _vm.dadosDeEntrada.orgao\n                            ? \"Selecione o setor\"\n                            : \" \",\n                          disabled: !_vm.dadosDeEntrada.orgao,\n                          items: _vm.setores,\n                          \"error-messages\": !_vm.dadosDeEntrada.setor\n                            ? _vm.errors.collect(\"setor\")\n                            : \"\"\n                        },\n                        on: { change: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u(\n                          [\n                            {\n                              key: \"label\",\n                              fn: function() {\n                                return [\n                                  _c(\"label-personalizado\", {\n                                    attrs: {\n                                      campo: \"setor\",\n                                      tela: _vm.nomeTela,\n                                      permissaoEdicao: !!_vm.dadosDeEntrada\n                                        .orgao,\n                                      obrigatorioPorPadrao: \"\",\n                                      apresentaTooltip: \"\"\n                                    }\n                                  })\n                                ]\n                              },\n                              proxy: true\n                            },\n                            {\n                              key: \"item\",\n                              fn: function(data) {\n                                return [\n                                  _c(\n                                    \"label\",\n                                    {\n                                      staticClass:\n                                        \"uo__autocomplete text-truncate\",\n                                      style: _vm.obterLarguraAutoComplete(\n                                        \"autoCompleteSetor\"\n                                      )\n                                    },\n                                    [_vm._v(_vm._s(data.item.descricao))]\n                                  )\n                                ]\n                              }\n                            },\n                            _vm.setorInativo\n                              ? {\n                                  key: \"append-outer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"tooltip-campos-inativos\", {\n                                        attrs: {\n                                          mensagem:\n                                            \"Este setor foi inativado, por favor selecione outro!\"\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              : null\n                          ],\n                          null,\n                          true\n                        ),\n                        model: {\n                          value: _vm.dadosDeEntrada.setor,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"setor\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.setor\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"az-date\", {\n                        directives: [\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required\",\n                            expression: \"'required'\"\n                          }\n                        ],\n                        attrs: {\n                          \"is-disabled\": !this.dadosDeEntrada.reconhecimento,\n                          \"name-date\": \"recebimento\",\n                          date: \"\",\n                          \"min-date\": _vm.verificaPermissaoRetroativa\n                            ? \"\"\n                            : _vm\n                                .moment(_vm.dataPermitida)\n                                .format(\"YYYY-MM-DDTHH:mm:ssZZ\"),\n                          \"max-date\": _vm\n                            .moment(new Date())\n                            .format(\"YYYY-MM-DDTHH:mm:ssZZ\"),\n                          placeholderDate: _vm.dadosDeEntrada.dataRecebimento\n                            ? \" \"\n                            : _vm.placeholders.date,\n                          \"is-required\": true,\n                          \"error-messages\": _vm.errors.collect(\"recebimento\")\n                        },\n                        on: { input: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label-date\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"dataRecebimento\",\n                                    tela: _vm.nomeTela,\n                                    obrigatorioPorPadrao: \"\"\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value: _vm.dadosDeEntrada.dataRecebimento,\n                          callback: function($$v) {\n                            _vm.$set(_vm.dadosDeEntrada, \"dataRecebimento\", $$v)\n                          },\n                          expression: \"dadosDeEntrada.dataRecebimento\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"v-text-field\", {\n                        directives: [\n                          {\n                            name: \"mask\",\n                            rawName: \"v-mask\",\n                            value: \"####NL######\",\n                            expression: \"'####NL######'\"\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: _vm.getObrigatorioRotulosPersonalizados(\n                              \"numeroNotaLancamentoContabil\",\n                              _vm.nomeTela\n                            )\n                              ? \"required|max:12\"\n                              : \"max:12\",\n                            expression:\n                              \"getObrigatorioRotulosPersonalizados('numeroNotaLancamentoContabil', nomeTela)?'required|max:12' : 'max:12'\"\n                          }\n                        ],\n                        attrs: {\n                          disabled: !this.dadosDeEntrada.reconhecimento,\n                          name: \"número da NL\",\n                          placeholder:\n                            _vm.placeholders.numeroNotaLancamentoContabil,\n                          maxlength: \"12\",\n                          \"error-messages\": _vm.errors.collect(\"número da NL\")\n                        },\n                        on: { change: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"numeroNotaLancamentoContabil\",\n                                    tela: _vm.nomeTela\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value:\n                            _vm.dadosDeEntrada.numeroNotaLancamentoContabil,\n                          callback: function($$v) {\n                            _vm.$set(\n                              _vm.dadosDeEntrada,\n                              \"numeroNotaLancamentoContabil\",\n                              $$v\n                            )\n                          },\n                          expression:\n                            \"dadosDeEntrada.numeroNotaLancamentoContabil\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                    [\n                      _c(\"az-date\", {\n                        attrs: {\n                          \"is-disabled\": !this.dadosDeEntrada.reconhecimento,\n                          \"name-date\": \"data da NL\",\n                          date: \"\",\n                          \"is-required\": _vm.getObrigatorioRotulosPersonalizados(\n                            \"dataNotaLancamentoContabil\",\n                            _vm.nomeTela\n                          ),\n                          \"max-date\": _vm\n                            .moment(new Date())\n                            .format(\"YYYY-MM-DDTHH:mm:ssZZ\"),\n                          placeholderDate: _vm.dadosDeEntrada\n                            .dataNotaLancamentoContabil\n                            ? \" \"\n                            : _vm.placeholders.date,\n                          \"error-messages\": _vm.errors.collect(\"data da NL\")\n                        },\n                        on: { input: _vm.editarIncorporacao },\n                        scopedSlots: _vm._u([\n                          {\n                            key: \"label-date\",\n                            fn: function() {\n                              return [\n                                _c(\"label-personalizado\", {\n                                  attrs: {\n                                    campo: \"dataNotaLancamentoContabil\",\n                                    tela: _vm.nomeTela\n                                  }\n                                })\n                              ]\n                            },\n                            proxy: true\n                          }\n                        ]),\n                        model: {\n                          value: _vm.dadosDeEntrada.dataNotaLancamentoContabil,\n                          callback: function($$v) {\n                            _vm.$set(\n                              _vm.dadosDeEntrada,\n                              \"dataNotaLancamentoContabil\",\n                              $$v\n                            )\n                          },\n                          expression:\n                            \"dadosDeEntrada.dataNotaLancamentoContabil\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-col\",\n                    {\n                      staticClass: \"pt-0\",\n                      attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" }\n                    },\n                    [\n                      _c(\n                        \"p\",\n                        { staticClass: \"titulo_checkbox pb-0\" },\n                        [\n                          _c(\"label-personalizado\", {\n                            attrs: {\n                              campo: \"origem\",\n                              tela: _vm.nomeTela,\n                              apenasNome: true\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _c(\n                        \"v-row\",\n                        { staticClass: \"checkbox_input tamanhoCheckbox\" },\n                        [\n                          _c(\n                            \"v-col\",\n                            { attrs: { cols: \"3\" } },\n                            [\n                              _c(\"v-checkbox\", {\n                                staticClass: \"tamanhoCheckbox\",\n                                attrs: {\n                                  label: \"Convênio\",\n                                  disabled: !this.dadosDeEntrada.reconhecimento\n                                },\n                                on: { change: _vm.editarIncorporacao },\n                                model: {\n                                  value: _vm.dadosDeEntrada.origemConvenio,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.dadosDeEntrada,\n                                      \"origemConvenio\",\n                                      $$v\n                                    )\n                                  },\n                                  expression: \"dadosDeEntrada.origemConvenio\"\n                                }\n                              })\n                            ],\n                            1\n                          ),\n                          _c(\n                            \"v-col\",\n                            { attrs: { cols: \"3\" } },\n                            [\n                              _c(\"v-checkbox\", {\n                                staticClass: \"checkbox__fundo\",\n                                attrs: {\n                                  label: \"Fundo\",\n                                  disabled: !this.dadosDeEntrada.reconhecimento\n                                },\n                                on: { change: _vm.selecionaFundo },\n                                model: {\n                                  value: _vm.dadosDeEntrada.origemFundo,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.dadosDeEntrada,\n                                      \"origemFundo\",\n                                      $$v\n                                    )\n                                  },\n                                  expression: \"dadosDeEntrada.origemFundo\"\n                                }\n                              })\n                            ],\n                            1\n                          ),\n                          _c(\n                            \"v-col\",\n                            { attrs: { cols: \"3\" } },\n                            [\n                              _c(\"v-checkbox\", {\n                                staticClass: \"checkbox__projeto\",\n                                attrs: {\n                                  label: \"Projeto\",\n                                  disabled: !this.dadosDeEntrada.reconhecimento\n                                },\n                                on: { change: _vm.editarIncorporacao },\n                                model: {\n                                  value: _vm.dadosDeEntrada.origemProjeto,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.dadosDeEntrada,\n                                      \"origemProjeto\",\n                                      $$v\n                                    )\n                                  },\n                                  expression: \"dadosDeEntrada.origemProjeto\"\n                                }\n                              })\n                            ],\n                            1\n                          ),\n                          _c(\n                            \"v-col\",\n                            { attrs: { cols: \"3\" } },\n                            [\n                              _c(\"v-checkbox\", {\n                                staticClass: \"checkbox__comodato\",\n                                attrs: {\n                                  label: \"Comodato\",\n                                  disabled: !this.dadosDeEntrada.reconhecimento\n                                },\n                                on: { change: _vm.editarIncorporacao },\n                                model: {\n                                  value: _vm.dadosDeEntrada.origemComodato,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.dadosDeEntrada,\n                                      \"origemComodato\",\n                                      $$v\n                                    )\n                                  },\n                                  expression: \"dadosDeEntrada.origemComodato\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  ),\n                  _vm.dadosDeEntrada.origemConvenio\n                    ? _c(\n                        \"v-col\",\n                        { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                        [\n                          _c(\"v-autocomplete\", {\n                            directives: [\n                              {\n                                name: \"validate\",\n                                rawName: \"v-validate\",\n                                value:\n                                  _vm.dadosDeEntrada.origemConvenio &&\n                                  _vm.getObrigatorioRotulosPersonalizados(\n                                    \"convenio\",\n                                    _vm.nomeTela\n                                  )\n                                    ? \"required\"\n                                    : \"\",\n                                expression:\n                                  \"(dadosDeEntrada.origemConvenio && getObrigatorioRotulosPersonalizados('convenio', nomeTela)) ? 'required' : ''\"\n                              }\n                            ],\n                            attrs: {\n                              name: \"convenio\",\n                              placeholder: \"Pesquise pelo nome do convênio\",\n                              items: _vm.convenios,\n                              \"item-text\": \"nome\",\n                              \"item-value\": \"id\",\n                              \"hide-no-data\": \"\",\n                              \"hide-selected\": \"\",\n                              filter: _vm.filtroComboAutoComplete,\n                              disabled: !this.dadosDeEntrada.reconhecimento,\n                              \"search-input\": _vm.buscarConvenioDinamicamente,\n                              \"error-messages\": _vm.errors.collect(\"convenio\")\n                            },\n                            on: {\n                              change: _vm.editarIncorporacao,\n                              \"update:searchInput\": function($event) {\n                                _vm.buscarConvenioDinamicamente = $event\n                              },\n                              \"update:search-input\": function($event) {\n                                _vm.buscarConvenioDinamicamente = $event\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"label\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"label-personalizado\", {\n                                        attrs: {\n                                          campo: \"convenio\",\n                                          tela: _vm.nomeTela\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                },\n                                {\n                                  key: \"item\",\n                                  fn: function(data) {\n                                    return [\n                                      _c(\n                                        \"label\",\n                                        {\n                                          staticClass: \"auto-complete-item-text\"\n                                        },\n                                        [_vm._v(_vm._s(data.item.nome))]\n                                      )\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              false,\n                              207787574\n                            ),\n                            model: {\n                              value: _vm.dadosDeEntrada.convenio,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dadosDeEntrada, \"convenio\", $$v)\n                              },\n                              expression: \"dadosDeEntrada.convenio\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.dadosDeEntrada.origemFundo\n                    ? _c(\n                        \"v-col\",\n                        { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                        [\n                          _c(\"v-autocomplete\", {\n                            directives: [\n                              {\n                                name: \"validate\",\n                                rawName: \"v-validate\",\n                                value:\n                                  _vm.dadosDeEntrada.origemFundo &&\n                                  _vm.getObrigatorioRotulosPersonalizados(\n                                    \"fundo\",\n                                    _vm.nomeTela\n                                  )\n                                    ? \"required\"\n                                    : \"\",\n                                expression:\n                                  \"(dadosDeEntrada.origemFundo && getObrigatorioRotulosPersonalizados('fundo', nomeTela)) ? 'required' : ''\"\n                              }\n                            ],\n                            attrs: {\n                              name: \"fundo\",\n                              placeholder: _vm.dadosDeEntrada.orgao\n                                ? \"Selecione o fundo\"\n                                : \" \",\n                              items: _vm.fundos,\n                              \"item-text\": \"descricao\",\n                              \"item-value\": \"id\",\n                              disabled:\n                                !_vm.dadosDeEntrada.orgao ||\n                                !this.dadosDeEntrada.reconhecimento,\n                              \"error-messages\": _vm.errors.collect(\"fundo\")\n                            },\n                            on: { change: _vm.editarIncorporacao },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"label\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"label-personalizado\", {\n                                        attrs: {\n                                          campo: \"fundo\",\n                                          tela: _vm.nomeTela\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              false,\n                              1856924273\n                            ),\n                            model: {\n                              value: _vm.dadosDeEntrada.fundo,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dadosDeEntrada, \"fundo\", $$v)\n                              },\n                              expression: \"dadosDeEntrada.fundo\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.dadosDeEntrada.origemProjeto\n                    ? _c(\n                        \"v-col\",\n                        { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                        [\n                          _c(\"v-text-field\", {\n                            directives: [\n                              {\n                                name: \"validate\",\n                                rawName: \"v-validate\",\n                                value:\n                                  _vm.dadosDeEntrada.origemProjeto &&\n                                  _vm.getObrigatorioRotulosPersonalizados(\n                                    \"projeto\",\n                                    _vm.nomeTela\n                                  )\n                                    ? \"required\"\n                                    : \"\",\n                                expression:\n                                  \"(dadosDeEntrada.origemProjeto && getObrigatorioRotulosPersonalizados('projeto', nomeTela)) ? 'required' : ''\"\n                              }\n                            ],\n                            attrs: {\n                              name: \"projeto\",\n                              maxlength: \"100\",\n                              placeholder: \"Informe o projeto\",\n                              disabled: !this.dadosDeEntrada.reconhecimento,\n                              \"error-messages\": _vm.errors.collect(\"projeto\")\n                            },\n                            on: { change: _vm.editarIncorporacao },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"label\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"label-personalizado\", {\n                                        attrs: {\n                                          campo: \"projeto\",\n                                          tela: _vm.nomeTela\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              false,\n                              2706807166\n                            ),\n                            model: {\n                              value: _vm.dadosDeEntrada.projeto,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dadosDeEntrada, \"projeto\", $$v)\n                              },\n                              expression: \"dadosDeEntrada.projeto\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.dadosDeEntrada.origemComodato\n                    ? _c(\n                        \"v-col\",\n                        { attrs: { cols: \"12\", md: \"4\", sm: \"6\", xs: \"12\" } },\n                        [\n                          _c(\"v-autocomplete\", {\n                            directives: [\n                              {\n                                name: \"validate\",\n                                rawName: \"v-validate\",\n                                value: !!(\n                                  _vm.dadosDeEntrada.origemComodato &&\n                                  _vm.getObrigatorioRotulosPersonalizados(\n                                    \"comodante\",\n                                    _vm.nomeTela\n                                  )\n                                )\n                                  ? \"required\"\n                                  : \"\",\n                                expression:\n                                  \"!!(dadosDeEntrada.origemComodato && getObrigatorioRotulosPersonalizados('comodante', nomeTela)) ? 'required' : ''\"\n                              }\n                            ],\n                            staticStyle: { \"max-height\": \"47px\" },\n                            attrs: {\n                              disabled: !this.dadosDeEntrada.reconhecimento,\n                              items: _vm.comodantes,\n                              loading: _vm.estaBuscandoComodantes,\n                              \"return-object\": false,\n                              \"search-input\": _vm.buscarComodantesDinamicamente,\n                              filter: _vm.filtroComboAutoComplete,\n                              \"item-text\": \"nome\",\n                              \"item-value\": \"id\",\n                              name: \"Comodante\",\n                              \"error-messages\": _vm.errors.collect(\"Comodante\"),\n                              \"no-data-text\":\n                                \"Não existe comodante cadastrado com este nome\",\n                              placeholder: \"Pesquise pelo nome do comodante\"\n                            },\n                            on: {\n                              \"update:searchInput\": function($event) {\n                                _vm.buscarComodantesDinamicamente = $event\n                              },\n                              \"update:search-input\": function($event) {\n                                _vm.buscarComodantesDinamicamente = $event\n                              },\n                              blur: _vm.editarIncorporacao\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"label\",\n                                  fn: function() {\n                                    return [\n                                      _c(\"label-personalizado\", {\n                                        attrs: {\n                                          campo: \"comodante\",\n                                          tela: _vm.nomeTela\n                                        }\n                                      })\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              false,\n                              193369075\n                            ),\n                            model: {\n                              value: _vm.dadosDeEntrada.comodante,\n                              callback: function($$v) {\n                                _vm.$set(_vm.dadosDeEntrada, \"comodante\", $$v)\n                              },\n                              expression: \"dadosDeEntrada.comodante\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e()\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\"acoes-botoes-continuar-voltar\", {\n        attrs: { controleContinuar: _vm.podeContinuar },\n        on: {\n          voltar: _vm.tratarEventoVoltar,\n          continuar: _vm.tratarEventoContinuar\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}