{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/configuracao/reserva/edicao/ReservaEdicao.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/configuracao/reserva/edicao/ReservaEdicao.vue","mtime":1620040672253},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AcoesBotoesFinalizarVoltar from '@/views/components/acoes/AcoesBotoesFinalizarVoltar'\nimport ReservaDadosGeraisEdicao from '@/views/pages/configuracao/reserva/edicao/ReservaDadosGeraisEdicao'\nimport ReservaIntervaloListagem\n    from '@/views/pages/configuracao/reserva/edicao/intervalo/listagem/ReservaIntervaloListagem'\nimport {mapActions, mapMutations, mapState} from 'vuex'\nimport {actionTypes, mutationTypes} from '@/core/constants'\n\nexport default {\n    name: 'ReservaDadosGeraisEdicaoIntervalo',\n    components: {AcoesBotoesFinalizarVoltar, ReservaIntervaloListagem, ReservaDadosGeraisEdicao},\n    data() {\n        return {\n            reservaId: '',\n            reserva: {},\n            existeIntervalos: false,\n            tituloAlerta: 'Atenção!',\n            subTituloAlerta: 'A situação será alterada para Parcial, pois ainda possui intervalos disponíveis nesta reserva. Deseja confirmar?',\n            textoBotaoAlertaConfirm: 'Confirmar',\n            iconeAlerta: 'warning'\n        }\n    },\n    async mounted() {\n        this.setReservaId()\n        await this.buscarReserva()\n        await this.verificarExistenciaIntervalosEmElaboracao()\n    },\n    computed: {\n        ...mapState({\n            adicionandoIntervalos: state => state.intervalo.existeEmElaboracao\n        })\n    },\n    methods: {\n        ...mapMutations([mutationTypes.CONFIGURACAO.RESERVA.INTERVALO.RESETA_PAGE_RESERVA_INTERVALO]),\n        ...mapActions([\n            actionTypes.CONFIGURACAO.RESERVA.BUSCAR_RESERVA_POR_ID,\n            actionTypes.CONFIGURACAO.RESERVA.FINALIZAR,\n            actionTypes.CONFIGURACAO.RESERVA.INTERVALO.EXISTE_EM_ELABORACAO,\n            actionTypes.CONFIGURACAO.RESERVA.INTERVALO.BUSCAR_TODOS_INTERVALOS_LISTAGEM\n        ]),\n        async recarregarDadosReserva() {\n            await this.buscarReserva()\n            await this.verificarExistenciaIntervalosEmElaboracao()\n            this.resetaPageReservaIntervalo()\n            await this.buscarTodosIntervalosListagem(this.reservaId)\n        },\n        setReservaId() {\n            this.reservaId = this.$route.params.id.toString()\n        },\n        async buscarReserva() {\n            try {\n                this.reserva = await this.buscarReservaPorId(this.reservaId)\n                if (this.reserva) {\n                    this.validarSeExisteIntervalos(this.reserva.quantidadeReservada, this.reserva.quantidadeRestante)\n                }\n            } catch (err) {\n                await this.$router.replace({name: 'ReservaListagem'})\n            }\n        },\n        validarSeExisteIntervalos(quantidadeReservada, quantidadeRestante) {\n            this.existeIntervalos = quantidadeReservada !== quantidadeRestante\n        },\n        async verificarExistenciaIntervalosEmElaboracao() {\n            await this.existeIntervalosEmElaboracao(this.reservaId)\n        },\n        tratarEventoFinalizar() {\n            if(this.reserva.quantidadeRestante !== 0) {\n                this.mostrarConfirmacao({\n                    titulo: this.tituloAlerta,\n                    subTitulo: this.subTituloAlerta,\n                    textoBotaoConfirm: this.textoBotaoAlertaConfirm,\n                    icon: this.iconeAlerta\n                }, (result) => {\n                    if (result.isConfirmed) {\n                        this.finalizar()\n                    }\n                })\n            } else {\n                this.finalizar()\n            }\n        },\n        async finalizar() {\n            const sucesso = await this.finalizarReserva(this.reservaId)\n            if (sucesso) {\n                await this.$router.replace({name: 'ReservaVisualizacao'})\n            }\n        },\n        async voltarParaListagem() {\n            await this.$router.replace({name: 'ReservaListagem'})\n        }\n    }\n}\n",{"version":3,"sources":["ReservaEdicao.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ReservaEdicao.vue","sourceRoot":"src/views/pages/configuracao/reserva/edicao","sourcesContent":["<template>\n    <div>\n        <router-view @recarregarDadosReserva=\"recarregarDadosReserva\"/>\n\n        <reserva-intervalo-listagem\n            :reserva-id=\"reservaId\" :reserva=\"reserva\"\n            @recarregarDadosReserva=\"recarregarDadosReserva\"\n            v-if=\"existeIntervalos\"\n        />\n        <reserva-dados-gerais-edicao\n            :reserva-id=\"reservaId\"\n            :reserva=\"reserva\"\n            @recarregarDadosReserva=\"recarregarDadosReserva\"\n            v-else\n        />\n\n        <v-divider/>\n\n        <acoes-botoes-finalizar-voltar\n            :desabilitado=\"!adicionandoIntervalos\"\n            texto-em-processamento=\"Aguarde\"\n            texto-bloqueio=\"Adicione órgãos na reserva para finalizar.\"\n            @finalizar=\"tratarEventoFinalizar\"\n            @voltar=\"voltarParaListagem\"\n        />\n    </div>\n</template>\n\n<script>\n    import AcoesBotoesFinalizarVoltar from '@/views/components/acoes/AcoesBotoesFinalizarVoltar'\n    import ReservaDadosGeraisEdicao from '@/views/pages/configuracao/reserva/edicao/ReservaDadosGeraisEdicao'\n    import ReservaIntervaloListagem\n        from '@/views/pages/configuracao/reserva/edicao/intervalo/listagem/ReservaIntervaloListagem'\n    import {mapActions, mapMutations, mapState} from 'vuex'\n    import {actionTypes, mutationTypes} from '@/core/constants'\n\n    export default {\n        name: 'ReservaDadosGeraisEdicaoIntervalo',\n        components: {AcoesBotoesFinalizarVoltar, ReservaIntervaloListagem, ReservaDadosGeraisEdicao},\n        data() {\n            return {\n                reservaId: '',\n                reserva: {},\n                existeIntervalos: false,\n                tituloAlerta: 'Atenção!',\n                subTituloAlerta: 'A situação será alterada para Parcial, pois ainda possui intervalos disponíveis nesta reserva. Deseja confirmar?',\n                textoBotaoAlertaConfirm: 'Confirmar',\n                iconeAlerta: 'warning'\n            }\n        },\n        async mounted() {\n            this.setReservaId()\n            await this.buscarReserva()\n            await this.verificarExistenciaIntervalosEmElaboracao()\n        },\n        computed: {\n            ...mapState({\n                adicionandoIntervalos: state => state.intervalo.existeEmElaboracao\n            })\n        },\n        methods: {\n            ...mapMutations([mutationTypes.CONFIGURACAO.RESERVA.INTERVALO.RESETA_PAGE_RESERVA_INTERVALO]),\n            ...mapActions([\n                actionTypes.CONFIGURACAO.RESERVA.BUSCAR_RESERVA_POR_ID,\n                actionTypes.CONFIGURACAO.RESERVA.FINALIZAR,\n                actionTypes.CONFIGURACAO.RESERVA.INTERVALO.EXISTE_EM_ELABORACAO,\n                actionTypes.CONFIGURACAO.RESERVA.INTERVALO.BUSCAR_TODOS_INTERVALOS_LISTAGEM\n            ]),\n            async recarregarDadosReserva() {\n                await this.buscarReserva()\n                await this.verificarExistenciaIntervalosEmElaboracao()\n                this.resetaPageReservaIntervalo()\n                await this.buscarTodosIntervalosListagem(this.reservaId)\n            },\n            setReservaId() {\n                this.reservaId = this.$route.params.id.toString()\n            },\n            async buscarReserva() {\n                try {\n                    this.reserva = await this.buscarReservaPorId(this.reservaId)\n                    if (this.reserva) {\n                        this.validarSeExisteIntervalos(this.reserva.quantidadeReservada, this.reserva.quantidadeRestante)\n                    }\n                } catch (err) {\n                    await this.$router.replace({name: 'ReservaListagem'})\n                }\n            },\n            validarSeExisteIntervalos(quantidadeReservada, quantidadeRestante) {\n                this.existeIntervalos = quantidadeReservada !== quantidadeRestante\n            },\n            async verificarExistenciaIntervalosEmElaboracao() {\n                await this.existeIntervalosEmElaboracao(this.reservaId)\n            },\n            tratarEventoFinalizar() {\n                if(this.reserva.quantidadeRestante !== 0) {\n                    this.mostrarConfirmacao({\n                        titulo: this.tituloAlerta,\n                        subTitulo: this.subTituloAlerta,\n                        textoBotaoConfirm: this.textoBotaoAlertaConfirm,\n                        icon: this.iconeAlerta\n                    }, (result) => {\n                        if (result.isConfirmed) {\n                            this.finalizar()\n                        }\n                    })\n                } else {\n                    this.finalizar()\n                }\n            },\n            async finalizar() {\n                const sucesso = await this.finalizarReserva(this.reservaId)\n                if (sucesso) {\n                    await this.$router.replace({name: 'ReservaVisualizacao'})\n                }\n            },\n            async voltarParaListagem() {\n                await this.$router.replace({name: 'ReservaListagem'})\n            }\n        }\n    }\n</script>\n"]}]}