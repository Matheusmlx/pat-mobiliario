{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzComboEnum.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzComboEnum.vue","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\n\nexport default {\n    props: {\n        enumObject: {\n            type: Object,\n            required: true\n        },\n        orderBy: {\n            type: String,\n            default: 'text'\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        chips: {\n            default: false\n        },\n        multiple: {\n            type:Boolean,\n            default: false\n        },\n        selectionSlot:{\n            type:Boolean,\n            default:false\n        },\n        name: {\n            type: String,\n            default: ''\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        isRequired: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            required: true\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        insertNullItem: {\n            type: Boolean,\n            default: true\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            combo: []\n        }\n    },\n    beforeMount() {\n        this.combo = this.converteParaCombo(this.enumObject)\n    },\n    methods: {\n        alteraValor(event) {\n            this.$emit('input', event)\n        },\n        converteParaCombo(objeto) {\n            let novoArray = []\n\n            if (objeto) {\n                for (let [chave, valor] of Object.entries(objeto)) {\n                    novoArray.push({ text: valor, value: chave })\n                }\n                novoArray = _.sortBy(novoArray, this.orderBy)\n            }\n            if (this.insertNullItem) {\n                return _.union([{ text: 'Selecione', value: null }], novoArray)\n            }\n\n            return novoArray\n        }\n    }\n}\n",{"version":3,"sources":["AzComboEnum.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AzComboEnum.vue","sourceRoot":"node_modules/@azinformatica/loki/src/components/form","sourcesContent":["<template>\n    <v-select\n        :items=\"combo\"\n        :value=\"value\"\n        @input=\"alteraValor\"\n        :label=\"label\"\n        :chips=\"chips\"\n        :multiple=\"multiple\"\n        :placeholder=\"placeholder\"\n        v-validate=\"{ required: isRequired }\"\n        :name=\"name\"\n        :error-messages=\"errors.collect(`${name}`)\"\n        :disabled=\"disabled\">\n        <template v-slot:label if=\"this.$slots['label']\">\n            <slot name=\"label\" />\n        </template>\n        <template v-slot:append-outer v-if=\"this.$slots['append-outer']\">\n            <slot name=\"append-outer\" />\n        </template>\n        <template v-if=\"selectionSlot\" v-slot:selection=\"{item,index}\">\n            <v-chip v-if=\"index ===0\">\n                <span>{{item.text}}</span>\n            </v-chip>\n            <span v-if=\"index === 1\" class=\"grey--text caption\">(+{{ value.length - 1 }} others)</span>\n        </template>\n        <template v-slot:append v-if=\"this.$slots['append']\">\n            <slot name=\"append\" />\n        </template>\n    </v-select>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n    props: {\n        enumObject: {\n            type: Object,\n            required: true\n        },\n        orderBy: {\n            type: String,\n            default: 'text'\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        chips: {\n            default: false\n        },\n        multiple: {\n            type:Boolean,\n            default: false\n        },\n        selectionSlot:{\n            type:Boolean,\n            default:false\n        },\n        name: {\n            type: String,\n            default: ''\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        isRequired: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            required: true\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        insertNullItem: {\n            type: Boolean,\n            default: true\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            combo: []\n        }\n    },\n    beforeMount() {\n        this.combo = this.converteParaCombo(this.enumObject)\n    },\n    methods: {\n        alteraValor(event) {\n            this.$emit('input', event)\n        },\n        converteParaCombo(objeto) {\n            let novoArray = []\n\n            if (objeto) {\n                for (let [chave, valor] of Object.entries(objeto)) {\n                    novoArray.push({ text: valor, value: chave })\n                }\n                novoArray = _.sortBy(novoArray, this.orderBy)\n            }\n            if (this.insertNullItem) {\n                return _.union([{ text: 'Selecione', value: null }], novoArray)\n            }\n\n            return novoArray\n        }\n    }\n}\n</script>\n"]}]}