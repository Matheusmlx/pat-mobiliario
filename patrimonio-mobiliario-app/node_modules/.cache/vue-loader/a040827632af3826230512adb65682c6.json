{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/edicao/documentos/ListagemDocumentos.vue?vue&type=style&index=0&id=7ec67417&lang=stylus&scoped=true&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/pages/patrimonios/incorporacao/edicao/documentos/ListagemDocumentos.vue","mtime":1615807921803},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.incorporacao-documentos\n    min-height 62vh\n\n",{"version":3,"sources":["ListagemDocumentos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OA;AACA","file":"ListagemDocumentos.vue","sourceRoot":"src/views/pages/patrimonios/incorporacao/edicao/documentos","sourcesContent":["<template>\n    <v-container fluid>\n        <listagem-documentos-vazia\n            v-if=\"documentos.length === 0\"\n            @novoDocumento=\"novoDocumento\"/>\n\n        <div v-else class=\"incorporacao-documentos pt-5\">\n            <div class=\"d-flex pr-5 justify-end\">\n                <v-btn\n                    :disabled=\"!verificaPermissaoEdicao\"\n                    color=\"primary\"\n                    depressed\n                    @click=\"novoDocumento\">\n                    Novo\n                </v-btn>\n            </div>\n            <div :key=\"documento.id\" v-for=\"(documento, index) in documentos\">\n                <listagem-documentos-item\n                    v-model=\"documentos[index]\"\n                    :tipoDocumento=\"tiposDocumento\"\n                    :index=\"index\"\n                    class=\"ml-9\"\n                    @baixarAnexo=\"baixarAnexo\"\n                    @removerDocumento=\"remover\"\n                    @salvar=\"tratarEventoSalvar\"\n                    @salvarAnexo=\"tratarEventoSalvarAnexo(documentos[index],index)\"/>\n            </div>\n        </div>\n\n        <acoes-botoes-finalizar-voltar :desabilitado=\"!verificaPermissaoEdicao || possuiItensNaoFinalizados\"\n                                       :em-processamento=\"incorporacaoEmProcessamento\"\n                                       texto-em-processamento=\"A incorporação está em processamento e não pode ser finalizada\"\n                                       :texto-bloqueio=\"retornaTextoBloqueio()\"\n                                       @finalizar=\"tratarEventoFinalizar\"\n                                       @voltar=\"tratarEventoVoltar\"/>\n    </v-container>\n</template>\n\n<script>\n    import ListagemDocumentosVazia from './ListagemDocumentosVazia'\n    import ListagemDocumentosItem from './ListagemDocumentosItem'\n    import {actionTypes, mutationTypes} from '@/core/constants'\n    import {mapActions, mapMutations, mapState} from 'vuex'\n    import AzHasPermissions from '@azinformatica/loki/src/utils/AzHasPermissions'\n    import AcoesBotoesFinalizarVoltar from '@/views/components/acoes/AcoesBotoesFinalizarVoltar'\n\n    export default {\n        data() {\n            return {\n                documentos: [],\n                tiposDocumento: [],\n                possuiItensNaoFinalizados: false,\n                documentoVazio: true,\n                incorporacaoId: null,\n                tituloAlerta: 'Tudo certo, incorporação em processamento',\n                subTituloAlerta: 'Sua incorporação foi adicionada na fila para processamento e iremos lhe notificar assim que estiver terminada.',\n                textoBotaoAlerta: 'Voltar para a listagem'\n            }\n        },\n        components: {AcoesBotoesFinalizarVoltar, ListagemDocumentosItem, ListagemDocumentosVazia},\n        async mounted() {\n            this.setIncorporacaoId()\n            await this.buscarTipoDocumentos()\n            await this.buscarDocumentosIncorporacao()\n            await this.buscarItensIncorporacao()\n        },\n        computed: {\n            verificaPermissaoEdicao() {\n                return AzHasPermissions(this.$store.state.loki.user.authorities, ['Mobiliario.Normal'])\n            },\n            ...mapState({situacaoIncorporacao: state => state.incorporacao.situacaoIncorporacao}),\n\n            incorporacaoEmProcessamento() {\n                return this.situacaoIncorporacao === 'EM_PROCESSAMENTO'\n            }\n        },\n        methods: {\n            ...mapActions([\n                actionTypes.PATRIMONIO.INCORPORACAO.INCORPORACAO_ITEM.BUSCAR_TODOS_ITENS_INCORPORACAO,\n                actionTypes.PATRIMONIO.INCORPORACAO.FINALIZAR_INCORPORACAO,\n                actionTypes.PATRIMONIO.INCORPORACAO.BUSCAR_SITUACAO_INCORPORACAO,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.CADASTRAR_DOCUMENTO,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.ATUALIZAR_DOCUMENTO,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.DOCUMENTO_DOWNLOAD,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.DOCUMENTO_UPLOAD,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.DELETAR_DOCUMENTO,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.BUSCAR_TIPO_DOCUMENTO,\n                actionTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.BUSCAR_DOCUMENTOS\n            ]),\n            ...mapMutations([\n                mutationTypes.PATRIMONIO.INCORPORACAO.DOCUMENTO.REMOVER_DOCUMENTOS\n            ]),\n            async baixarAnexo(anexo) {\n                await this.documentoDownload(anexo)\n            },\n            async tratarEventoSalvarAnexo(anexo, index) {\n                this.desabilitarLoadingGlobal()\n                if (anexo.uriAnexo) {\n                    this.documentos[index].uriAnexo = await this.documentoUpload(anexo)\n                }\n                this.habilitarLoadingGlobal()\n            },\n            async novoDocumento() {\n                if (this.verificaQuantidadeDeDocumentosExcedida()) {\n                    this.mostrarNotificacaoErro('A quantidade máxima de documentos cadastrados para esta incorporação foi atingida.')\n                } else {\n                    if (this.validarCadastrosFinalizados()) {\n                        this.documentos.push({\n                            incorporacao: this.incorporacaoId,\n                            numero: null,\n                            valor: null,\n                            tipo: null,\n                            data: null,\n                            uriAnexo: null\n                        })\n                        this.documentoVazio = false\n                    } else {\n                        this.mostrarNotificacaoAviso('Finalize o cadastro para cadastrar novos documentos')\n                    }\n                }\n            },\n            verificaQuantidadeDeDocumentosExcedida() {\n                if (this.documentos.length === 30) {\n                    return true\n                }\n                return false\n            },\n            validarCadastrosFinalizados() {\n                return this.documentoVazio\n            },\n            async tratarEventoFinalizar() {\n                if (!this.possuiItensNaoFinalizados) {\n                    try {\n                        const dadosFinalizacao = await this.finalizarIncorporacao(this.incorporacaoId)\n                        if (dadosFinalizacao.situacao === 'EM_PROCESSAMENTO') {\n                            this.mostrarNotificacaoSucessoComConfirmacao({\n                                titulo: this.tituloAlerta,\n                                subTitulo: this.subTituloAlerta,\n                                textoBotao: this.textoBotaoAlerta\n                            }, (result) => {\n                                if (result.isConfirmed) {\n                                    this.$router.replace({name: 'IncorporacaoListagem'})\n                                }\n                            })\n                        } else {\n                            this.mostrarNotificacaoSucessoDefault()\n                            await this.$router.replace({\n                                name: 'VisualizarRegistroIncorporacao',\n                                params: {incorporacaoId: this.incorporacaoId}\n                            })\n                        }\n                    } catch (err) {\n                        this.mostrarNotificacaoErro(err.response.data.message)\n                    }\n                }\n            },\n            async remover(documento) {\n                if (typeof documento.numero != 'undefined' && typeof documento.id != 'undefined') {\n                    await this.deletarDocumento(documento)\n                } else {\n                    this.removerDocumentos(documento)\n                    this.documentoVazio = true\n                }\n            },\n            async buscarTipoDocumentos() {\n                const resultado = await this.buscarTipoDocumento()\n                if (resultado) {\n                    this.tiposDocumento = this.ordenaTipoDocumentos(resultado)\n                }\n            },\n            ordenaTipoDocumentos(resultado) {\n                return resultado.sort(function (a, b) {\n                    if (a.descricao < b.descricao) {\n                        return -1\n                    } else if (a.descricao > b.descricao) {\n                        return 1\n                    } else {\n                        return 0\n                    }\n                })\n            },\n            async buscarDocumentosIncorporacao() {\n                this.documentos = await this.buscarDocumentos(this.incorporacaoId)\n            },\n            async buscarItensIncorporacao() {\n                const resultado = await this.buscarTodosItensIncorporacao(this.incorporacaoId)\n                if (resultado) {\n                    this.possuiItensNaoFinalizados = !!resultado.items.find(element => element.situacao === 'EM_ELABORACAO')\n                }\n            },\n            setIncorporacaoId() {\n                this.incorporacaoId = this.$route.params.incorporacaoId\n            },\n            async tratarEventoSalvar(documento) {\n                this.desabilitarLoadingGlobal()\n                if (documento.valor === 0) {\n                    documento.valor = null\n                }\n                if (typeof documento.id == 'undefined') {\n                    await this.cadastrarDocumento(documento)\n                    this.documentoVazio = true\n                    this.buscarDocumentosIncorporacao()\n                } else {\n                    await this.atualizarDocumento(documento)\n                    this.documentoVazio = true\n                }\n                this.habilitarLoadingGlobal()\n            },\n            tratarEventoVoltar() {\n                if (this.verificaPermissaoEdicao) {\n                    this.$router.replace({\n                        name: 'ItensIncorporacaoListagem',\n                        params: {incorporacaoId: this.incorporacaoId},\n                    })\n                } else {\n                    this.$router.replace({\n                        name: 'VisualizarItensIncorporacao',\n                        params: {incorporacaoId: this.incorporacaoId},\n                    })\n                }\n            },\n            retornaTextoBloqueio() {\n                if (!this.verificaPermissaoEdicao) {\n                    return 'Você não possui permissão para finalizar.'\n                }\n                if (this.possuiItensNaoFinalizados) {\n                    return 'Todos os itens do passo 2 devem estar finalizados.'\n                }\n                return ''\n            }\n        }\n    }\n</script>\n\n<style lang=\"stylus\" scoped>\n.incorporacao-documentos\n    min-height 62vh\n\n</style>\n\n\n"]}]}