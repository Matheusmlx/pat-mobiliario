{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/modal/configuracao/reserva/intervalo/ModalAdicionarIntervalos.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/modal/configuracao/reserva/intervalo/ModalAdicionarIntervalos.vue","mtime":1620064484371},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.pr-tabela-listagem-orgaos-reserva\n  .v-input__slot\n    margin-bottom 0 !important\n\n  th\n    font-size 13px !important\n    font-weight bold\n    color #666666 !important\n\n  tr:hover\n    background transparent !important\n\n  tr.v-data-table__selected\n    background white !important\n\n  tr.v-data-table__selected td .v-icon\n    color grey !important\n\n\n\n",{"version":3,"sources":["ModalAdicionarIntervalos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0TA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA","file":"ModalAdicionarIntervalos.vue","sourceRoot":"src/views/components/modal/configuracao/reserva/intervalo","sourcesContent":["<template>\n  <v-dialog persistent v-model=\"dialog\" width=\"1100\">\n    <v-card>\n\n      <modal-adicionar-intervalos-cabecalho :reserva=\"reserva\" :filtros-interno=\"filtrosInterno\" :restante=\"restante\"/>\n\n      <v-responsive class=\"overflow-y-auto\" max-height=\"50vh\">\n        <v-data-table\n            :headers=\"colunasTabela\"\n            :items=\"reservaIntervalos\"\n            :options.sync=\"paginacaoInterna\"\n            :server-items-length=\"totalItens\"\n            item-key=\"id\"\n            ref=\"table\"\n            class=\"pr-tabela-listagem-orgaos-reserva \"\n            hide-default-footer\n            show-select\n            no-data-text=\"Não há órgãos a serem adicionados\">\n          <template v-slot:header.data-table-select=\"{ on, props }\">\n            <v-simple-checkbox\n                :ripple=\"false\"\n                color=\"grey\"\n                v-bind=\"props\"\n                v-on=\"on\"\n                @click=\"trtarSelecionarTodasReservaIntervalos(props)\"/>\n          </template>\n          <template v-slot:item=\"item\">\n            <modal-adicionar-intervalos-form\n                :reservaIntervalo=\"item.item\"\n                :maior-numero-fim-intervalo=\"maiorNumeroFimIntervalo\"\n                @buscarProximoIntervalo=\"buscarProximoIntervalo\"\n                @selecionaReservaIntervalo=\"selecionaReservaIntervalo\"\n                @deselecionaReservaIntervalo=\"deselecionaReservaIntervalo\"\n                @atualizarMaiorNumeroFimIntervalo=\"verificarMaiorNumeroFimIntervalo\"/>\n          </template>\n        </v-data-table>\n      </v-responsive>\n\n      <paginacao class=\"ml-5 mr-5\" :paginacao-interna=\"paginacaoInterna\" :paginas=\"paginas\"\n                 @resetaPage=\"resetaPage\"/>\n\n\n      <v-divider></v-divider>\n      <modal-adicionar-intervalos-acoes\n          :quantidade-selecionada-igual-zero=\"quantidadeSelecionadaIgualZero\"\n          :existe-intervalos-sem-preenchimento=\"existeIntervalosSemPreenchimento\"\n          :quantidade-selecionados=\"quantidadeSelecionados\"\n          @adicionar=\"tratarEventoAdicionar\"\n          @fecharModal=\"fecharModal\"\n      />\n    </v-card>\n  </v-dialog>\n\n</template>\n\n<script>\n\n    import { mapActions, mapMutations } from 'vuex'\n    import { actionTypes, mutationTypes } from '@/core/constants'\n    import ModalAdicionarIntervalosCabecalho from './ModalAdicionarIntervalosCabecalho'\n    import ModalAdicionarIntervalosForm from './ModalAdicionarIntervalosForm'\n    import ModalAdicionarIntervalosAcoes from './ModalAdicionarIntervalosAcoes'\n    import Paginacao from '@/views/components/tabela/Paginacao'\n    import _ from 'lodash'\n\n    export default {\n        name: 'ModalAdicionarIntervalos',\n        components: {\n            ModalAdicionarIntervalosAcoes,\n            ModalAdicionarIntervalosCabecalho,\n            Paginacao,\n            ModalAdicionarIntervalosForm,\n        },\n        data () {\n            return {\n                dialog: true,\n                colunasTabela: [],\n                reservaId: this.$route.params.id,\n                reserva: {},\n                reservaIntervalos: [],\n                reservaIntervalosSelecionados: [],\n                maiorNumeroFimIntervalo: 0,\n                paginas: 0,\n                totalItens: 0,\n                filtrosInterno: this.getFiltros(),\n                paginacaoInterna: this.getPaginacao(),\n            }\n        },\n        watch: {\n            paginacaoInterna: {\n                handler (novoValor) {\n                    this.tratarEventoPaginar(novoValor)\n                },\n                deep: true,\n            },\n            quantidadeSelecionadaIgualZero(val) {\n                if(val){\n                    this.maiorNumeroFimIntervalo = 0\n                }\n            }\n        },\n        computed: {\n            quantidadeSelecionadaIgualZero () {\n                return this.quantidadeSelecionados === 0\n            },\n            existeIntervalosSemPreenchimento () {\n                return this.reservaIntervalosSelecionados.filter(\n                    reservaIntervalo => !reservaIntervalo.quantidadeReservada || !reservaIntervalo.numeroInicio ||\n                        !reservaIntervalo.numeroFim).length > 0\n            },\n            quantidadeSelecionados () {\n                return this.reservaIntervalosSelecionados.length\n            },\n            restante () {\n                if (this.reservaIntervalosSelecionados.length === 0) {\n                    return this.reserva.quantidadeRestante\n                } else {\n                    let totalQuantidadeInserida = 0\n                    this.reservaIntervalosSelecionados.forEach(reservaIntervalo => {\n                        if (reservaIntervalo.quantidadeReservada) {\n                            totalQuantidadeInserida += parseInt(reservaIntervalo.quantidadeReservada)\n                        }\n                    })\n                    return this.reserva.quantidadeRestante - totalQuantidadeInserida\n                }\n            },\n        },\n        async mounted () {\n            this.criarColunasTabela()\n            await this.buscarReserva()\n        },\n        methods: {\n            ...mapActions([\n                actionTypes.CONFIGURACAO.RESERVA.BUSCAR_TODOS_ORGAOS_PAGINADO,\n                actionTypes.CONFIGURACAO.RESERVA.BUSCAR_RESERVA_POR_ID,\n                actionTypes.CONFIGURACAO.RESERVA.INTERVALO.BUSCAR_INTERVALO,\n                actionTypes.CONFIGURACAO.RESERVA.INTERVALO.SALVAR_INTERVALO,\n            ]),\n            ...mapMutations([\n                mutationTypes.CONFIGURACAO.RESERVA.SET_FILTRO_BUSCA_ORGAOS_RESERVA,\n                mutationTypes.CONFIGURACAO.RESERVA.SET_PAGINACAO_BUSCA_ORGAOS_RESERVA,\n                mutationTypes.CONFIGURACAO.RESERVA.RESETA_PAGE_ORGAOS_RESERVA,\n            ]),\n            criarColunasTabela () {\n                this.colunasTabela = this.criarColunas(\n                    4,\n                    ['Descrição', 'Preenchimento', 'Quantidade', 'Intervalo'],\n                    ['descricao', 'preenchimento', 'quantidadeReservada', 'intervalo'],\n                    [],\n                    [],\n                    [],\n                    'gray--text')\n            },\n            async buscarReserva () {\n                this.reserva = await this.buscarReservaPorId(this.reservaId)\n            },\n            async buscar () {\n                this.setFiltroBuscaOrgaosReserva(this.getFiltrosInterno())\n                await this.buscarTodosOrgaosReserva()\n            },\n            async tratarEventoBuscaSimples (valor) {\n                this.resetaPageOrgaosReserva()\n                this.filtrosInterno.conteudo.value = valor\n                await this.buscar()\n            },\n            async buscarTodosOrgaosReserva () {\n                const resultado = await this.buscarTodosOrgaosPaginado()\n                if (resultado) {\n                    this.orgaos = resultado.items\n                    this.paginas = resultado.totalPages\n                    this.totalItens = resultado.totalElements\n                    this.criarReservaIntervalos(this.orgaos)\n                    this.atualizaReservaIntervalosComSelecionados()\n                }\n            },\n            criarReservaIntervalos (orgaos) {\n                this.reservaIntervalos = []\n                orgaos.forEach(orgao => {\n                    let reservaIntervalo = {\n                        reservaId: this.$route.params.id,\n                        orgaoId: orgao.id,\n                        descricao: orgao.descricao,\n                        quantidadeReservada: null,\n                        numeroInicio: '',\n                        numeroFim: '',\n                        preenchimento: 'AUTOMATICO',\n                        selecionado: false,\n                    }\n                    this.reservaIntervalos.push(reservaIntervalo)\n                })\n            },\n            atualizaReservaIntervalosComSelecionados () {\n                for (let index = 0; index < this.reservaIntervalos.length; index++) {\n                    const reservaIntervaloSelecionado = this.reservaIntervalosSelecionados.find(\n                        selecionado => selecionado.orgaoId === this.reservaIntervalos[index].orgaoId)\n                    if (reservaIntervaloSelecionado) {\n                        this.reservaIntervalos[index] = reservaIntervaloSelecionado\n                    }\n                }\n            },\n            trtarSelecionarTodasReservaIntervalos (props) {\n                if(!props.value) {\n                    this.selecionarTodasReservasIntervalos()\n                }else{\n                    this.deselecionaTodasReservasIntervalos()\n                }\n                this.reservaIntervalos.forEach(reservaIntervalo => reservaIntervalo.selecionado = !props.value)\n            },\n            selecionarTodasReservasIntervalos(){\n                const reservasIntervaloNaoSelecionadas = this.reservaIntervalos.filter( reservaIntervalo => !reservaIntervalo.selecionado)\n                this.reservaIntervalosSelecionados.push(...reservasIntervaloNaoSelecionadas)\n            },\n            deselecionaTodasReservasIntervalos() {\n                this.reservaIntervalos.forEach( reservaIntervalo => {\n                    this.deselecionaReservaIntervalo(reservaIntervalo)\n                })\n            },\n            deselecionaReservaIntervalo (reservaIntervalo) {\n                this.excluirReservaIntervaloDosSelecionados(reservaIntervalo)\n                this.resetarReservaIntervalos(reservaIntervalo)\n            },\n            excluirReservaIntervaloDosSelecionados (reservaIntervalo) {\n                const indexReservaIntervaloExcluir = this.reservaIntervalosSelecionados.findIndex(\n                    selecionado => selecionado.orgaoId === reservaIntervalo.orgaoId)\n                this.reservaIntervalosSelecionados.splice(indexReservaIntervaloExcluir, 1)\n            },\n            resetarReservaIntervalos (reservaIntervalo) {\n                const indexReservaIntervaloAtualizar = this.reservaIntervalos.findIndex(\n                    reservaInter => reservaInter.orgaoId === reservaIntervalo.orgaoId)\n                this.reservaIntervalos[indexReservaIntervaloAtualizar].preenchimento = 'AUTOMATICO'\n                this.reservaIntervalos[indexReservaIntervaloAtualizar].quantidadeReservada = null\n                this.reservaIntervalos[indexReservaIntervaloAtualizar].numeroInicio = ''\n                this.reservaIntervalos[indexReservaIntervaloAtualizar].numeroFim = ''\n                this.reservaIntervalos[indexReservaIntervaloAtualizar].selecionado = false\n            },\n            async buscarProximoIntervalo (reservaInter) {\n                const entidadeBuscaIntervalo = this.criarEntidadeBuscaIntervalo(reservaInter)\n                const intervalo = await this.buscarIntervalo(entidadeBuscaIntervalo)\n                if(intervalo) {\n                    this.reservaIntervalos.forEach(reservaIntervalo => {\n                        if (reservaIntervalo.orgaoId === reservaInter.orgaoId) {\n                            reservaIntervalo.numeroInicio = intervalo.numeroInicio\n                            reservaIntervalo.numeroFim = intervalo.numeroFim\n                            this.verificarMaiorNumeroFimIntervalo(reservaIntervalo.numeroFim)\n                        }\n                    })\n                }\n            },\n            verificarMaiorNumeroFimIntervalo (numeroFim) {\n                if (numeroFim) {\n                    if (this.maiorNumeroFimIntervalo < numeroFim) {\n                        this.maiorNumeroFimIntervalo = numeroFim\n                    }\n                } else {\n                    this.maiorNumeroFimIntervalo = Math.max.apply(Math, this.reservaIntervalosSelecionados.map(\n                        function (selecionado) {return selecionado.numeroFim}))\n                }\n            },\n            criarEntidadeBuscaIntervalo (reservaInter) {\n                return {\n                    items: this.reservaIntervalosSelecionados,\n                    reservaId: reservaInter.reservaId,\n                    orgaoId: reservaInter.orgaoId,\n                    quantidadeReservada: reservaInter.quantidadeReservada,\n                }\n            },\n            selecionaReservaIntervalo (reservaIntervalo) {\n                const indexReservaIntervaloSelecionada = this.reservaIntervalosSelecionados.findIndex(\n                    selecionado => selecionado.orgaoId === reservaIntervalo.orgaoId)\n                if (indexReservaIntervaloSelecionada !== -1) {\n                    this.reservaIntervalosSelecionados[indexReservaIntervaloSelecionada] = reservaIntervalo\n                } else {\n                    this.reservaIntervalosSelecionados.push(reservaIntervalo)\n                }\n            },\n            async tratarEventoAdicionar () {\n                if (await this.validarDadosFormulario()) {\n                    await this.salvarIntervalo({ reservaId: this.reservaId, intervalos: this.reservaIntervalosSelecionados })\n                    await this.fecharModal()\n                }\n            },\n            async validarDadosFormulario () {\n                return await this.$validator.validateAll()\n            },\n            async fecharModal () {\n                this.$emit('recarregarDadosReserva')\n                await this.$router.push({ name: 'ReservaEdicao', params: { id: this.$route.params.id } })\n            },\n            tratarEventoPaginar (paginacao) {\n                this.setPaginacaoBuscaOrgaosReserva(paginacao)\n                this.buscar()\n            },\n            resetaPage () {\n                this.resetaPageOrgaosReserva()\n            },\n            getPaginacao () {\n                return _.cloneDeep(this.$store.state.reserva.todosOrgaos.paginacao)\n            },\n            getFiltros () {\n                return _.cloneDeep(this.$store.state.reserva.todosOrgaos.filtros)\n            },\n            getFiltrosInterno () {\n                return _.cloneDeep(this.filtrosInterno)\n            },\n            async tratarEventoRemoverFiltro (propriedade) {\n                if (this.filtrosInterno[propriedade]) {\n                    this.filtrosInterno[propriedade].value = this.filtrosInterno[propriedade].default\n                }\n                await this.buscar()\n            },\n        }\n    }\n</script>\n<style lang=\"stylus\">\n.pr-tabela-listagem-orgaos-reserva\n  .v-input__slot\n    margin-bottom 0 !important\n\n  th\n    font-size 13px !important\n    font-weight bold\n    color #666666 !important\n\n  tr:hover\n    background transparent !important\n\n  tr.v-data-table__selected\n    background white !important\n\n  tr.v-data-table__selected td .v-icon\n    color grey !important\n\n\n\n</style>"]}]}