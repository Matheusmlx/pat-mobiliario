{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzMoney.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzMoney.vue","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport accounting from 'accounting'\n\nexport default {\n    props: {\n        value: {\n            required: true,\n            default: null\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        name: {\n            type: String,\n            default: ''\n        },\n        required: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        showClearButton: {\n            type: Boolean,\n            default: false\n        },\n        maxLength: {\n            type: Number,\n            default: 24\n        },\n        validateLength: {\n            type: Boolean,\n            default: false\n        },\n        negative: {\n            type: Boolean,\n            default: false\n        },\n        precision: {\n            type: Number,\n            default: 2\n        },\n        prefix: {\n            type: String,\n            default: 'R$ '\n        },\n        suffix: {\n            type: String,\n            default: ''\n        },\n        requeridMessage: {\n            type: String,\n            default: 'O campo {name} é obrigatório'\n        },\n        validationField: {\n            type: Number\n        },\n        eventSubmit: {\n            type: String\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            moneyConfig: {\n                decimal: ',',\n                thousands: '.',\n                prefix: this.prefix,\n                suffix: this.suffix,\n                precision: this.precision,\n                masked: false\n            },\n            clickedField: false,\n            formatted: false,\n            select: false,\n            length: this.maxLength\n        }\n    },\n    computed: {\n        valueFormated() {\n            if (this.value !== null) {\n                return accounting.formatMoney(this.value, this.prefix, this.precision, this.thousands, this.decimal)\n            } else {\n                return null\n            }\n        },\n        conditionalMoneyConfig() {\n            return this.value !== null || this.clickedField ? this.moneyConfig : null\n        },\n        showClearButtonIf() {\n            return this.value !== null && this.showClearButton ? 'fas fa-times-circle' : ''\n        }\n    },\n    watch: {\n        validationField() {\n            this.validateRequired(this.value)\n        }\n    },\n    updated(){\n        if(!this.required){\n            this.clearErrorValidate()\n        }\n    },\n    methods: {\n        updateValue(value, event) {\n            this.formatted = true\n            let valueNumber = value\n            if (this.prefix) {\n                valueNumber = valueNumber.replace(this.prefix, '')\n            }\n            if (this.suffix) {\n                valueNumber = valueNumber.replace(this.suffix, '')\n            }\n            const valueFormatedSimple = accounting.unformat(valueNumber, ',')\n\n            if (\n                (valueFormatedSimple !== this.value || event === 'keyupEnter' || event === 'keyupEsc') &&\n                this.clickedField\n            ) {\n\n                if(!this.eventSubmit || this.eventSubmit === event ) {\n                    this.$emit('input', valueFormatedSimple)\n                    this.$emit(event, valueFormatedSimple)\n                    this.clickedField = false\n                }\n            }\n\n            this.validateRequired(value)\n        },\n        validatorNegative($event) {\n            if ($event.key === '-' && !this.negative) {\n                $event.preventDefault()\n            }\n        },\n        cleanValue() {\n            this.$emit('blur', null)\n            this.clickedField = false\n        },\n        checkKey($event) {\n            if ($event.key !== 'Tab') {\n                this.clickedField = true\n            }\n            if ($event.key === 'Enter') {\n                this.updateValue($event.target.value, 'keyupEnter')\n            } else if ($event.key === 'Escape') {\n                this.updateValue($event.target.value, 'keyupEsc')\n            } else {\n                this.updateValue($event.target.value, 'keyup')\n            }\n        },\n        validateRequired(value) {\n            if (this.required) {\n                this.clearErrorValidate()\n                if (!value) {\n                    this.errors.add({\n                        field: this.name,\n                        msg: this.requeridMessage.replace('{name}', this.name)\n                    })\n                }\n            }\n        },\n        checkMaxLength($event) {\n            if (this.validateLength) {\n                if (this.formatted && this.isDigit($event.code) && !this.select) {\n                    this.length = this.maxLength + Math.floor(this.maxLength / 3) + this.prefix.length\n                } else {\n                    this.length = this.maxLength\n                }\n\n                if (this.isDigit($event.code)) {\n                    this.select = false\n                }\n            }\n        },\n        isDigit(key) {\n            const pattern = /Digit\\d|Numpad\\d/i\n\n            return pattern.test(key)\n        },\n        selectValue() {\n            this.select = true\n        },\n        checkKeyAndValidateLength($event) {\n            this.validatorNegative($event)\n            this.checkMaxLength($event)\n        },\n        clearErrorValidate() {\n            for (var index = 0; index < this.$validator.errors.items.length; index++) {\n                if (this.$validator.errors.items[index].field === this.name) {\n                    this.$validator.errors.items.splice(index, 1)\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["AzMoney.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AzMoney.vue","sourceRoot":"node_modules/@azinformatica/loki/src/components/form","sourcesContent":["<template>\n    <v-text-field\n        v-money=\"conditionalMoneyConfig\"\n        :name=\"name\"\n        :label=\"label\"\n        :maxLength=\"length\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :value=\"valueFormated\"\n        :placeholder=\"placeholder\"\n        :showClearButton=\"showClearButton\"\n        class=\"clear-button\"\n        :prepend-inner-icon=\"showClearButtonIf\"\n        :error-messages=\"errors.collect(`${name}`)\"\n        @click:prepend-inner=\"cleanValue\"\n        @blur=\"updateValue($event.target.value, 'blur')\"\n        @keydown.ctrl.65=\"selectValue\"\n        @keydown=\"checkKeyAndValidateLength($event)\"\n        @keyup=\"checkKey($event)\">\n        <template v-slot:label if=\"this.$slots['label']\">\n            <slot name=\"label\" />\n        </template>\n        <template v-slot:append-outer v-if=\"this.$slots['append-outer']\">\n            <slot name=\"append-outer\" />\n        </template>\n        <template v-slot:append v-if=\"this.$slots['append']\">\n            <slot name=\"append\" />\n        </template>\n    </v-text-field>\n</template>\n\n<script>\nimport accounting from 'accounting'\n\nexport default {\n    props: {\n        value: {\n            required: true,\n            default: null\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        placeholder: {\n            type: String,\n            default: ''\n        },\n        name: {\n            type: String,\n            default: ''\n        },\n        required: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        showClearButton: {\n            type: Boolean,\n            default: false\n        },\n        maxLength: {\n            type: Number,\n            default: 24\n        },\n        validateLength: {\n            type: Boolean,\n            default: false\n        },\n        negative: {\n            type: Boolean,\n            default: false\n        },\n        precision: {\n            type: Number,\n            default: 2\n        },\n        prefix: {\n            type: String,\n            default: 'R$ '\n        },\n        suffix: {\n            type: String,\n            default: ''\n        },\n        requeridMessage: {\n            type: String,\n            default: 'O campo {name} é obrigatório'\n        },\n        validationField: {\n            type: Number\n        },\n        eventSubmit: {\n            type: String\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            moneyConfig: {\n                decimal: ',',\n                thousands: '.',\n                prefix: this.prefix,\n                suffix: this.suffix,\n                precision: this.precision,\n                masked: false\n            },\n            clickedField: false,\n            formatted: false,\n            select: false,\n            length: this.maxLength\n        }\n    },\n    computed: {\n        valueFormated() {\n            if (this.value !== null) {\n                return accounting.formatMoney(this.value, this.prefix, this.precision, this.thousands, this.decimal)\n            } else {\n                return null\n            }\n        },\n        conditionalMoneyConfig() {\n            return this.value !== null || this.clickedField ? this.moneyConfig : null\n        },\n        showClearButtonIf() {\n            return this.value !== null && this.showClearButton ? 'fas fa-times-circle' : ''\n        }\n    },\n    watch: {\n        validationField() {\n            this.validateRequired(this.value)\n        }\n    },\n    updated(){\n        if(!this.required){\n            this.clearErrorValidate()\n        }\n    },\n    methods: {\n        updateValue(value, event) {\n            this.formatted = true\n            let valueNumber = value\n            if (this.prefix) {\n                valueNumber = valueNumber.replace(this.prefix, '')\n            }\n            if (this.suffix) {\n                valueNumber = valueNumber.replace(this.suffix, '')\n            }\n            const valueFormatedSimple = accounting.unformat(valueNumber, ',')\n\n            if (\n                (valueFormatedSimple !== this.value || event === 'keyupEnter' || event === 'keyupEsc') &&\n                this.clickedField\n            ) {\n\n                if(!this.eventSubmit || this.eventSubmit === event ) {\n                    this.$emit('input', valueFormatedSimple)\n                    this.$emit(event, valueFormatedSimple)\n                    this.clickedField = false\n                }\n            }\n\n            this.validateRequired(value)\n        },\n        validatorNegative($event) {\n            if ($event.key === '-' && !this.negative) {\n                $event.preventDefault()\n            }\n        },\n        cleanValue() {\n            this.$emit('blur', null)\n            this.clickedField = false\n        },\n        checkKey($event) {\n            if ($event.key !== 'Tab') {\n                this.clickedField = true\n            }\n            if ($event.key === 'Enter') {\n                this.updateValue($event.target.value, 'keyupEnter')\n            } else if ($event.key === 'Escape') {\n                this.updateValue($event.target.value, 'keyupEsc')\n            } else {\n                this.updateValue($event.target.value, 'keyup')\n            }\n        },\n        validateRequired(value) {\n            if (this.required) {\n                this.clearErrorValidate()\n                if (!value) {\n                    this.errors.add({\n                        field: this.name,\n                        msg: this.requeridMessage.replace('{name}', this.name)\n                    })\n                }\n            }\n        },\n        checkMaxLength($event) {\n            if (this.validateLength) {\n                if (this.formatted && this.isDigit($event.code) && !this.select) {\n                    this.length = this.maxLength + Math.floor(this.maxLength / 3) + this.prefix.length\n                } else {\n                    this.length = this.maxLength\n                }\n\n                if (this.isDigit($event.code)) {\n                    this.select = false\n                }\n            }\n        },\n        isDigit(key) {\n            const pattern = /Digit\\d|Numpad\\d/i\n\n            return pattern.test(key)\n        },\n        selectValue() {\n            this.select = true\n        },\n        checkKeyAndValidateLength($event) {\n            this.validatorNegative($event)\n            this.checkMaxLength($event)\n        },\n        clearErrorValidate() {\n            for (var index = 0; index < this.$validator.errors.items.length; index++) {\n                if (this.$validator.errors.items[index].field === this.name) {\n                    this.$validator.errors.items.splice(index, 1)\n                }\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"stylus\">\n.clear-button\n    .v-input__icon\n        min-width 13px\n        width 13px\n\n    i\n        font-size 13px\n</style>\n"]}]}