{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzDate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/@azinformatica/loki/src/components/form/AzDate.vue","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    props: {\n        dateFormat: {\n            type: String,\n            default: 'DD/MM/YYYY',\n            validator: function(value) {\n                return ['DD/MM/YYYY', 'MM/DD/YYYY'].indexOf(value) !== -1\n            }\n        },\n        dateMask: {\n            type: String,\n            default: '##/##/####'\n        },\n        limparData: {\n            type: Boolean,\n            default: false\n        },\n        dateTime: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: String,\n            default: ''\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        isRequired: {\n            type: Boolean,\n            default: false\n        },\n        nameDate: {\n            type: String,\n            default: ''\n        },\n        placeholderDate: {\n            type: String,\n            default: 'DD/MM/YYYY'\n        },\n        nameHour: {\n            type: String,\n            default: ''\n        },\n        placeholderHour: {\n            type: String,\n            default: 'HH:mm'\n        },\n        isDisabled: {\n            type: Boolean,\n            default: false\n        },\n        minDate: {\n            type: String\n        },\n        maxDate: {\n            type: String\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            date: null,\n            dateFormatted: null,\n            dateInvalid: false,\n            time: null,\n            timeFormatted: null,\n            dialogDate: false,\n            dialogTime: false,\n            reverseDateFormatObj: {\n                'DD/MM/YYYY': 'YYYY-MM-DD',\n                'MM/DD/YYYY': 'YYYY-DD-MM'\n            },\n            focus: false\n        }\n    },\n    computed: {\n        reverseDateFormat() {\n            return this.reverseDateFormatObj[this.dateFormat]\n        },\n        currentLanguage() {\n            return this.$vuetify.lang.current\n        },\n        checkDate() {\n            if (this.focus) {\n                return this.validateDate\n            }\n            return {\n                required: this.isRequired,\n                date_format: this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n            }\n        },\n        validateDate() {\n            const validationDate = {}\n\n            if(this.isRequired) {\n                validationDate.required = true\n            }\n\n            if(this.dateFormatted && this.dateFormatted.length === 10) {\n                validationDate.date_format = this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n\n                if(this.maxDate) {\n                    validationDate.before = this.moment(this.maxDate)\n                        .add(1, 'days')\n                        .format(this.dateFormat)\n                }\n\n                if(this.minDate) {\n                    validationDate.after = this.moment(this.minDate)\n                        .subtract(1, 'days')\n                        .format(this.dateFormat)\n                }\n            }\n            return validationDate\n        }\n    },\n    watch: {\n        value: {\n            handler(val) {\n                this.updateDateTimeByModel(val)\n                this.updateValue(val)\n            },\n            immediate: true\n        },\n        limparData(val) {\n            if (val) {\n                this.dateFormatted = null\n            }\n        }\n    },\n    mounted() {\n        this.alterTabIndexFromAppendButtons()\n    },\n    methods: {\n        getFormattedDate(day, month, year) {\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return `${day}/${month}/${year}`\n                },\n                'MM/DD/YYYY': function() {\n                    return `${month}/${day}/${year}`\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        formatDate(date) {\n            if (!date) return null\n\n            const [year, month, day] = date.split('-')\n            return this.getFormattedDate(day, month, year)\n        },\n        pickDateEvent() {\n            this.dialogDate = false\n        },\n        validateAndParseDate(date) {\n            if (!date || !this.dateStringIsValid(date) || this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date)) {\n                if ((date && this.dateStringIsValid(date)) && (this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date))) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    return\n                }\n                if(date === null || date.length === 0) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    this.$emit('input', null)\n                }\n                return\n            }\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            this.date = `${dateObj.year}-${dateObj.month}-${dateObj.day}`\n            this.updateModelDate(this.date)\n        },\n        getDayMonthYearFromDateString(date) {\n            const dateFormated = date.replace(new RegExp('/', 'g'), '')\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(0, 2),\n                        month: dateFormated.substring(2, 4),\n                        year: dateFormated.substring(4, 8)\n                    }\n                },\n                'MM/DD/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(2, 4),\n                        month: dateFormated.substring(0, 2),\n                        year: dateFormated.substring(4, 8)\n                    }\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        dayIsValidForMonthAndYear(day, month, year) {\n            let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            const isLeapYear = (!(year % 4) && year % 100) || !(year % 400)\n\n            if (isLeapYear) {\n                daysInMonth[1] = 29\n            }\n\n            return day > 0 && day <= daysInMonth[--month]\n        },\n        dateStringIsValid(date) {\n            if (date.length < 8) return false\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            const monthIsValid = Number(dateObj.month) > 0 && Number(dateObj.month) < 13\n            const yearIsValid = Number(dateObj.year) > 999\n\n            if (!monthIsValid || !yearIsValid) return false\n\n            return this.dayIsValidForMonthAndYear(Number(dateObj.day), Number(dateObj.month), Number(dateObj.year))\n        },\n        timeStringIsValid() {\n            if (!this.timeFormatted || this.timeFormatted.length < 4) return false\n\n            const firstTimeDigit = Number(this.timeFormatted.substring(0, 2))\n            const secondTimeDigit = Number(this.timeFormatted.substring(2, 4))\n\n            return firstTimeDigit < 24 && secondTimeDigit < 60\n        },\n        validateTimeEvent() {\n            if (!this.timeStringIsValid()) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            }\n\n            const hour = this.timeFormatted.substring(0, 2)\n            const minute = this.timeFormatted.substring(2, 4)\n\n            this.time = hour + ':' + minute\n        },\n        changeTimeEvent() {\n            this.timeFormatted = this.time.replace(':', '')\n            this.$refs.menu.save(this.time)\n        },\n        openMenuDate() {\n            this.dialogDate = true\n        },\n        openMenuTime() {\n            this.dialogTime = true\n        },\n        setEmptyTimeAndDate() {\n            this.time = null\n            this.timeFormatted = ''\n            this.date = null\n            this.dateFormatted = ''\n        },\n        updateModelDate(value) {\n            this.dateInvalid = false\n            if (this.time && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, this.time)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.time && !value) {\n                this.$emit('input', value)\n                return\n            }\n            if (!this.time && !value) {\n                this.$emit('input', null)\n                return\n            }\n            if (!this.time) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, '00:00')\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                this.selectContentInputHour()\n            }\n        },\n        updateModelTime(value) {\n            if (this.date && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(this.date, value)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.date && !value) this.$emit('input', this.date)\n        },\n        updateDateTimeByModel(modelVal) {\n            const maxLengthOfModelDateWithTime = 28\n\n            if (!modelVal || modelVal.length > maxLengthOfModelDateWithTime) {\n                this.setEmptyTimeAndDate()\n                return\n            }\n\n            if (this.dateTime) this.updateDateWithTimeByModel(modelVal)\n            else this.updateDateWithoutTimeByModel(modelVal)\n        },\n        updateDateWithTimeByModel(modelVal) {\n            const maxLengthOfModel = 28,\n                dateModelLength = 10,\n                dateModelWithSeparatorLength = 11\n\n            if (modelVal.length > dateModelWithSeparatorLength && modelVal.length < maxLengthOfModel) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            } else if (modelVal && modelVal.length < dateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length === dateModelLength) {\n                this.date = modelVal\n                this.dateFormatted = this.formatDate(modelVal)\n            } else if (modelVal.length === maxLengthOfModel) {\n                const dateTime = this.getDateTimeWithSystemTimezone(modelVal)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.changeTimeEvent()\n            }\n        },\n        updateDateWithoutTimeByModel(modelVal) {\n            const maxDateModelLength = 10\n\n            if (modelVal.length < maxDateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length >= maxDateModelLength) {\n                this.date = modelVal.substring(0, maxDateModelLength)\n                this.dateFormatted = this.formatDate(this.date)\n            }\n        },\n        getDateTimeWithSystemTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        getDateTimeZeroTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        buildDateTimeWithTimezone(date, time) {\n            const seconds = '00'\n            const dateTime = date + 'T' + time + ':' + seconds\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return dateTime + offset\n        },\n        getOffsetFromCurrentDateTime(dateTime) {\n            return this.moment(dateTime)\n                .tz(this.$store.state.loki.timezone)\n                .format('Z')\n        },\n        selectContentInputHour() {\n            this.$nextTick(() => {\n                const input = document.getElementsByName(this.nameHour)[0]\n                if (input) {\n                    input.setSelectionRange(0, 5)\n                }\n            })\n        },\n        updateValue(val) {\n            if (val) {\n                const dateTime = this.getDateTimeWithSystemTimezone(val)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.timeFormatted = this.time.replace(':', '')\n            }\n        },\n        dateMinIsAllowed(date) {\n            if (this.minDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const minDateObj = this.getDayMonthYearFromDateString(this.moment(this.minDate).format('DD/MM/YYYY'))\n                return this.moment(this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`))\n                    .isBefore(this.moment(`${minDateObj.year}-${minDateObj.month}-${minDateObj.day}`))\n            }\n            return false\n        },\n        dateMaxIsAllowed(date) {\n            if (this.maxDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const maxDateObj = this.getDayMonthYearFromDateString(this.moment(this.maxDate).format('DD/MM/YYYY'))\n                return this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`)\n                    .isAfter(this.moment(`${maxDateObj.year}-${maxDateObj.month}-${maxDateObj.day}`))\n            }\n            return false\n        },\n        alterTabIndexFromAppendButtons() {\n            const bottonsDate = document.querySelectorAll('.az-date-date-input .v-input__append-inner .v-icon')\n            bottonsDate.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n            const bottonsTime = document.querySelectorAll('.az-date-time-input .v-input__append-inner .v-icon')\n            bottonsTime.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n        },\n        changeFocus(event) {\n            if (event.type === 'focus') {\n                this.focus = true\n            } else if (event.type === 'blur') {\n                this.focus = false\n            }\n        }\n    }\n}\n",{"version":3,"sources":["AzDate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AzDate.vue","sourceRoot":"node_modules/@azinformatica/loki/src/components/form","sourcesContent":["<template>\n    <div style=\"display: flex;\">\n        <div v-bind:style=\"dateTime ? 'width: 60%' : 'width: 100%'\">\n            <v-dialog\n                ref=\"menu\"\n                :close-on-content-click=\"false\"\n                v-model=\"dialogDate\"\n                nudge-right=\"450\"\n                nudge-bottom=\"120\"\n                transition=\"scale-transition\"\n                offset-y\n                max-width=\"290px\"\n                min-width=\"290px\"\n                v-if=\"!isDisabled\">\n                <v-date-picker\n                    v-model=\"date\"\n                    :value=\"value\"\n                    :locale=\"currentLanguage\"\n                    @input=\"updateModelDate($event), pickDateEvent()\"\n                    :min=\"minDate\"\n                    :max=\"maxDate\"\n                    class=\"az-date\"/>\n            </v-dialog>\n            <v-text-field\n                v-validate=\"checkDate\"\n                @focus=\"changeFocus\"\n                @blur=\"changeFocus\"\n                :name=\"nameDate\"\n                :error-messages=\"errors.collect(`${nameDate}`)\"\n                v-model=\"dateFormatted\"\n                :label=\"label\"\n                v-mask=\"'##/##/####'\"\n                :placeholder=\"placeholderDate\"\n                :disabled=\"isDisabled\"\n                :min-date=\"minDate\"\n                :max-date=\"maxDate\"\n                append-icon=\"event\"\n                class=\"az-date-date-input\"\n                @click:append=\"openMenuDate\"\n                @keyup=\"validateAndParseDate(dateFormatted)\">\n                <template v-slot:label v-if=\"this.$slots['label-date']\">\n                    <slot name=\"label-date\" />\n                </template>\n                <template v-slot:append-outer v-if=\"this.$slots['append-outer']\">\n                    <slot name=\"append-outer\" />\n                </template>\n                <template v-slot:append v-if=\"this.$slots['append']\">\n                    <v-btn icon @click=\"openMenuDate\">\n                        <v-icon small>event</v-icon>\n                    </v-btn>\n                    <slot name=\"append\" />\n                </template>\n            </v-text-field>\n        </div>\n        <div v-if=\"dateTime\" style=\"margin-left: 10px; width: 40%\">\n            <v-dialog\n                ref=\"menu\"\n                :close-on-content-click=\"false\"\n                v-model=\"dialogTime\"\n                nudge-right=\"540\"\n                nudge-bottom=\"120\"\n                transition=\"scale-transition\"\n                offset-y\n                max-width=\"290px\"\n                min-width=\"290px\"\n                v-if=\"!isDisabled\">\n                <v-time-picker\n                    v-if=\"dialogTime\"\n                    v-model=\"time\"\n                    :locale=\"currentLanguage\"\n                    @change=\"changeTimeEvent(), updateModelTime($event)\"\n                    format=\"24hr\"\n                    class=\"az-date\"/>\n            </v-dialog>\n            <v-text-field\n                v-validate=\"{ required: isRequired }\"\n                :name=\"nameHour\"\n                :error-messages=\"errors.collect(`${nameHour}`)\"\n                :disabled=\"isDisabled\"\n                v-model=\"timeFormatted\"\n                mask=\"time\"\n                :placeholder=\"placeholderHour\"\n                append-icon=\"access_time\"\n                class=\"az-date-time-input\"\n                @click:append=\"openMenuTime\"\n                @focus=\"selectContentInputHour\"\n                @blur=\"validateTimeEvent(), updateModelTime(time)\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        dateFormat: {\n            type: String,\n            default: 'DD/MM/YYYY',\n            validator: function(value) {\n                return ['DD/MM/YYYY', 'MM/DD/YYYY'].indexOf(value) !== -1\n            }\n        },\n        dateMask: {\n            type: String,\n            default: '##/##/####'\n        },\n        limparData: {\n            type: Boolean,\n            default: false\n        },\n        dateTime: {\n            type: Boolean,\n            default: false\n        },\n        value: {\n            type: String,\n            default: ''\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        isRequired: {\n            type: Boolean,\n            default: false\n        },\n        nameDate: {\n            type: String,\n            default: ''\n        },\n        placeholderDate: {\n            type: String,\n            default: 'DD/MM/YYYY'\n        },\n        nameHour: {\n            type: String,\n            default: ''\n        },\n        placeholderHour: {\n            type: String,\n            default: 'HH:mm'\n        },\n        isDisabled: {\n            type: Boolean,\n            default: false\n        },\n        minDate: {\n            type: String\n        },\n        maxDate: {\n            type: String\n        }\n    },\n    inject: ['$validator'],\n    data() {\n        return {\n            date: null,\n            dateFormatted: null,\n            dateInvalid: false,\n            time: null,\n            timeFormatted: null,\n            dialogDate: false,\n            dialogTime: false,\n            reverseDateFormatObj: {\n                'DD/MM/YYYY': 'YYYY-MM-DD',\n                'MM/DD/YYYY': 'YYYY-DD-MM'\n            },\n            focus: false\n        }\n    },\n    computed: {\n        reverseDateFormat() {\n            return this.reverseDateFormatObj[this.dateFormat]\n        },\n        currentLanguage() {\n            return this.$vuetify.lang.current\n        },\n        checkDate() {\n            if (this.focus) {\n                return this.validateDate\n            }\n            return {\n                required: this.isRequired,\n                date_format: this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n            }\n        },\n        validateDate() {\n            const validationDate = {}\n\n            if(this.isRequired) {\n                validationDate.required = true\n            }\n\n            if(this.dateFormatted && this.dateFormatted.length === 10) {\n                validationDate.date_format = this.dateFormat === 'DD/MM/YYYY' ? 'dd/MM/yyyy' : 'MM/dd/yyyy'\n\n                if(this.maxDate) {\n                    validationDate.before = this.moment(this.maxDate)\n                        .add(1, 'days')\n                        .format(this.dateFormat)\n                }\n\n                if(this.minDate) {\n                    validationDate.after = this.moment(this.minDate)\n                        .subtract(1, 'days')\n                        .format(this.dateFormat)\n                }\n            }\n            return validationDate\n        }\n    },\n    watch: {\n        value: {\n            handler(val) {\n                this.updateDateTimeByModel(val)\n                this.updateValue(val)\n            },\n            immediate: true\n        },\n        limparData(val) {\n            if (val) {\n                this.dateFormatted = null\n            }\n        }\n    },\n    mounted() {\n        this.alterTabIndexFromAppendButtons()\n    },\n    methods: {\n        getFormattedDate(day, month, year) {\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return `${day}/${month}/${year}`\n                },\n                'MM/DD/YYYY': function() {\n                    return `${month}/${day}/${year}`\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        formatDate(date) {\n            if (!date) return null\n\n            const [year, month, day] = date.split('-')\n            return this.getFormattedDate(day, month, year)\n        },\n        pickDateEvent() {\n            this.dialogDate = false\n        },\n        validateAndParseDate(date) {\n            if (!date || !this.dateStringIsValid(date) || this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date)) {\n                if ((date && this.dateStringIsValid(date)) && (this.dateMaxIsAllowed(date) || this.dateMinIsAllowed(date))) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    return\n                }\n                if(date === null || date.length === 0) {\n                    this.date = null\n                    this.dateFormatted = ''\n                    this.$emit('input', null)\n                }\n                return\n            }\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            this.date = `${dateObj.year}-${dateObj.month}-${dateObj.day}`\n            this.updateModelDate(this.date)\n        },\n        getDayMonthYearFromDateString(date) {\n            const dateFormated = date.replace(new RegExp('/', 'g'), '')\n            const getFnDateFormat = {\n                'DD/MM/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(0, 2),\n                        month: dateFormated.substring(2, 4),\n                        year: dateFormated.substring(4, 8)\n                    }\n                },\n                'MM/DD/YYYY': function() {\n                    return {\n                        day: dateFormated.substring(2, 4),\n                        month: dateFormated.substring(0, 2),\n                        year: dateFormated.substring(4, 8)\n                    }\n                }\n            }\n\n            return getFnDateFormat[this.dateFormat]()\n        },\n        dayIsValidForMonthAndYear(day, month, year) {\n            let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            const isLeapYear = (!(year % 4) && year % 100) || !(year % 400)\n\n            if (isLeapYear) {\n                daysInMonth[1] = 29\n            }\n\n            return day > 0 && day <= daysInMonth[--month]\n        },\n        dateStringIsValid(date) {\n            if (date.length < 8) return false\n\n            const dateObj = this.getDayMonthYearFromDateString(date)\n\n            const monthIsValid = Number(dateObj.month) > 0 && Number(dateObj.month) < 13\n            const yearIsValid = Number(dateObj.year) > 999\n\n            if (!monthIsValid || !yearIsValid) return false\n\n            return this.dayIsValidForMonthAndYear(Number(dateObj.day), Number(dateObj.month), Number(dateObj.year))\n        },\n        timeStringIsValid() {\n            if (!this.timeFormatted || this.timeFormatted.length < 4) return false\n\n            const firstTimeDigit = Number(this.timeFormatted.substring(0, 2))\n            const secondTimeDigit = Number(this.timeFormatted.substring(2, 4))\n\n            return firstTimeDigit < 24 && secondTimeDigit < 60\n        },\n        validateTimeEvent() {\n            if (!this.timeStringIsValid()) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            }\n\n            const hour = this.timeFormatted.substring(0, 2)\n            const minute = this.timeFormatted.substring(2, 4)\n\n            this.time = hour + ':' + minute\n        },\n        changeTimeEvent() {\n            this.timeFormatted = this.time.replace(':', '')\n            this.$refs.menu.save(this.time)\n        },\n        openMenuDate() {\n            this.dialogDate = true\n        },\n        openMenuTime() {\n            this.dialogTime = true\n        },\n        setEmptyTimeAndDate() {\n            this.time = null\n            this.timeFormatted = ''\n            this.date = null\n            this.dateFormatted = ''\n        },\n        updateModelDate(value) {\n            this.dateInvalid = false\n            if (this.time && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, this.time)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.time && !value) {\n                this.$emit('input', value)\n                return\n            }\n            if (!this.time && !value) {\n                this.$emit('input', null)\n                return\n            }\n            if (!this.time) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(value, '00:00')\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                this.selectContentInputHour()\n            }\n        },\n        updateModelTime(value) {\n            if (this.date && value) {\n                const dateTimeWithTimezone = this.buildDateTimeWithTimezone(this.date, value)\n                const dateTimeTimezoneZero = this.getDateTimeZeroTimezone(dateTimeWithTimezone)\n                this.$emit('input', dateTimeTimezoneZero)\n                return\n            }\n            if (this.date && !value) this.$emit('input', this.date)\n        },\n        updateDateTimeByModel(modelVal) {\n            const maxLengthOfModelDateWithTime = 28\n\n            if (!modelVal || modelVal.length > maxLengthOfModelDateWithTime) {\n                this.setEmptyTimeAndDate()\n                return\n            }\n\n            if (this.dateTime) this.updateDateWithTimeByModel(modelVal)\n            else this.updateDateWithoutTimeByModel(modelVal)\n        },\n        updateDateWithTimeByModel(modelVal) {\n            const maxLengthOfModel = 28,\n                dateModelLength = 10,\n                dateModelWithSeparatorLength = 11\n\n            if (modelVal.length > dateModelWithSeparatorLength && modelVal.length < maxLengthOfModel) {\n                this.time = null\n                this.timeFormatted = ''\n                return\n            } else if (modelVal && modelVal.length < dateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length === dateModelLength) {\n                this.date = modelVal\n                this.dateFormatted = this.formatDate(modelVal)\n            } else if (modelVal.length === maxLengthOfModel) {\n                const dateTime = this.getDateTimeWithSystemTimezone(modelVal)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.changeTimeEvent()\n            }\n        },\n        updateDateWithoutTimeByModel(modelVal) {\n            const maxDateModelLength = 10\n\n            if (modelVal.length < maxDateModelLength) {\n                this.date = null\n                this.dateFormatted = ''\n                return\n            }\n\n            if (modelVal.length >= maxDateModelLength) {\n                this.date = modelVal.substring(0, maxDateModelLength)\n                this.dateFormatted = this.formatDate(this.date)\n            }\n        },\n        getDateTimeWithSystemTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        getDateTimeZeroTimezone(dateTime) {\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return this.moment(dateTime)\n                .utcOffset(offset)\n                .format(this.reverseDateFormat + 'THH:mm:ss.SSSZZ')\n        },\n        buildDateTimeWithTimezone(date, time) {\n            const seconds = '00'\n            const dateTime = date + 'T' + time + ':' + seconds\n            const offset = this.getOffsetFromCurrentDateTime(dateTime)\n            return dateTime + offset\n        },\n        getOffsetFromCurrentDateTime(dateTime) {\n            return this.moment(dateTime)\n                .tz(this.$store.state.loki.timezone)\n                .format('Z')\n        },\n        selectContentInputHour() {\n            this.$nextTick(() => {\n                const input = document.getElementsByName(this.nameHour)[0]\n                if (input) {\n                    input.setSelectionRange(0, 5)\n                }\n            })\n        },\n        updateValue(val) {\n            if (val) {\n                const dateTime = this.getDateTimeWithSystemTimezone(val)\n                const splitDateTime = dateTime.split('T')\n                this.date = splitDateTime[0]\n                this.dateFormatted = this.formatDate(this.date)\n                this.time = splitDateTime[1].substring(0, 5)\n                this.timeFormatted = this.time.replace(':', '')\n            }\n        },\n        dateMinIsAllowed(date) {\n            if (this.minDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const minDateObj = this.getDayMonthYearFromDateString(this.moment(this.minDate).format('DD/MM/YYYY'))\n                return this.moment(this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`))\n                    .isBefore(this.moment(`${minDateObj.year}-${minDateObj.month}-${minDateObj.day}`))\n            }\n            return false\n        },\n        dateMaxIsAllowed(date) {\n            if (this.maxDate) {\n                const dateObj = this.getDayMonthYearFromDateString(date)\n                const maxDateObj = this.getDayMonthYearFromDateString(this.moment(this.maxDate).format('DD/MM/YYYY'))\n                return this.moment(`${dateObj.year}-${dateObj.month}-${dateObj.day}`)\n                    .isAfter(this.moment(`${maxDateObj.year}-${maxDateObj.month}-${maxDateObj.day}`))\n            }\n            return false\n        },\n        alterTabIndexFromAppendButtons() {\n            const bottonsDate = document.querySelectorAll('.az-date-date-input .v-input__append-inner .v-icon')\n            bottonsDate.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n            const bottonsTime = document.querySelectorAll('.az-date-time-input .v-input__append-inner .v-icon')\n            bottonsTime.forEach(btn => {\n                btn.tabIndex = '-1'\n            })\n        },\n        changeFocus(event) {\n            if (event.type === 'focus') {\n                this.focus = true\n            } else if (event.type === 'blur') {\n                this.focus = false\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"stylus\">\n.az-date\n    .v-picker__title\n        padding 10px 15px\n\n    .v-date-picker-title__date\n        font-size 20px\n\n    .v-time-picker-title__time .v-picker__title__btn, .v-time-picker-title__time span\n        font-size 40px\n        height 50px\n\n    .v-time-picker-title\n        -webkit-box-pack center\n        -ms-flex-pack center\n        justify-content center\n</style>\n"]}]}