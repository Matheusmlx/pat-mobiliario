{"remainingRequest":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/empenho/Empenho.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/src/views/components/empenho/Empenho.vue","mtime":1614797888081},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/Documentos/patrimonio-mobiliario/patrimonio-mobiliario-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapActions} from 'vuex'\nimport AzHasPermissions from '@azinformatica/loki/src/utils/AzHasPermissions'\nimport LabelPersonalizado from '@/views/components/label/LabelPersonalizado'\nimport {actionTypes} from '@/core/constants'\nimport moment from 'moment'\nimport AcoesIconesCircularAdicionarRemover from '@/views/components/acoes/AcoesIconesCircularAdicionarRemover'\n\nexport default {\n    name: 'Empenho',\n    components:{AcoesIconesCircularAdicionarRemover, LabelPersonalizado},\n    props: {\n        value: Object,\n        obrigatorio: {\n            type: Boolean,\n            default: false\n        },\n        statusReconhecimento:{\n            type: Boolean,\n            default: true\n        },\n        primeiroEmpenho: {\n            type: Boolean,\n            default: false\n        },\n        idIncorporacao:{\n            required: true\n        },\n        quantidadeEmpenhos: {\n            required: true\n        }\n    },\n    data() {\n        return {\n            placeholders: {\n                date: '__/__/____',\n            },\n            empenho: this.value,\n            nomeTela: 'INCORPORACAO_DADOS_GERAIS'\n        }\n    },\n    computed: {\n        camposPreenchidos() {\n            return this.empenho.numeroEmpenho && this.empenho.dataEmpenho && this.empenho.valorEmpenho\n        },\n        verificaPermissaoEdicao() {\n            return AzHasPermissions(this.$store.state.loki.user.authorities, [\n                'Mobiliario.Normal',\n            ])\n        },\n    },\n    methods: {\n        ...mapActions([\n            actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.INSERIR_EMPENHO,\n            actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.ATUALIZAR_EMPENHO,\n            actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.REMOVER_EMPENHO\n        ]),\n        atualizarValorInserido(valor) {\n            this.empenho.valorEmpenho = valor\n            this.editarEmpenho()\n        },\n        async editarEmpenho() {\n            if (this.camposPreenchidos) {\n                await this.desabilitarLoadingGlobal()\n                if (this.empenho.id) {\n                    await this.editar()\n                } else {\n                    await this.salvar()\n                }\n                await this.habilitarLoadingGlobal()\n                this.$emit('buscarEmpenhos')\n            }\n        },\n        async editar() {\n            if (this.empenho.dataEmpenho !== null) {\n                this.empenho.dataEmpenho = moment(this.empenho.dataEmpenho).format('YYYY-MM-DDTHH:mm:ss.SSSZZ')\n            }\n            this.empenho.incorporacaoId = this.idIncorporacao\n            await this.atualizarEmpenho(this.empenho)\n\n        },\n        async salvar() {\n            await this.inserirEmpenho(this.empenho)\n        },\n        async adicionarNovoEmpenho() {\n            if (this.quantidadeEmpenhos >= 10) {\n                this.mostrarNotificacaoAviso('Não é possível cadastrar mais que 10 empenhos!')\n            }\n            if (this.camposPreenchidos && this.quantidadeEmpenhos < 10) {\n                this.$emit('adicionarNovoEmpenho')\n            }\n        },\n        async remover() {\n            if (this.empenho.id) {\n                await this.removerEmpenho(this.empenho.id)\n            }\n            this.$emit('removerEmpenho', this.empenho.id)\n        }\n    }\n}\n",{"version":3,"sources":["Empenho.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Empenho.vue","sourceRoot":"src/views/components/empenho","sourcesContent":["<template>\n    <div class=\"empenho\">\n        <div class=\"empenhoForm\">\n            <v-row class=\"form\">\n                <v-col cols=\"12\" md=\"4\" sm=\"6\" xs=\"12\" :class=\"[{active: !verificaPermissaoEdicao}, 'empenho']\">\n                    <v-text-field\n                        v-model=\"empenho.numeroEmpenho\"\n                        :disabled=\"!verificaPermissaoEdicao || statusReconhecimento\"\n                        :class=\"{desativado: !verificaPermissaoEdicao}\"\n                        :name=\"'numeroEmpenho'\"\n                        :placeholder=\"verificaPermissaoEdicao ? 'Informe o número' : ' '\"\n                        maxlength=\"50\"\n                        @change=\"editarEmpenho\"\n                        v-validate=\" obrigatorio ? 'required' : ''\"\n                        :error-messages=\"errors.collect('numeroEmpenho')\">\n                        <template v-slot:label>\n                            <label-personalizado campo=\"numeroEmpenho\" :tela=\"nomeTela\" :permissaoEdicao=\"obrigatorio && verificaPermissaoEdicao\"\n                                                 obrigatorioPorPadrao/>\n                        </template>\n                    </v-text-field>\n                </v-col>\n                <v-col cols=\"12\" md=\"4\" sm=\"6\" xs=\"12\">\n                    <az-date\n                        v-model=\"empenho.dataEmpenho\"\n                        :is-disabled=\"!verificaPermissaoEdicao || statusReconhecimento\"\n                        :name-date=\"'dataEmpenho'\"\n                        :max-date=\"moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ')\"\n                        :is-required=\"obrigatorio\"\n                        date\n                        :placeholderDate=\"(empenho.dataEmpenho) ? ' ' : placeholders.date\"\n                        @input=\"editarEmpenho\">\n                        <template v-slot:label-date>\n                            <label-personalizado campo=\"dataEmpenho\" :tela=\"nomeTela\" :permissaoEdicao=\"obrigatorio && verificaPermissaoEdicao\"\n                                                 obrigatorioPorPadrao/>\n                        </template>\n                    </az-date>\n                </v-col>\n                <v-col cols=\"12\" md=\"4\" sm=\"6\" xs=\"12\">\n                    <az-money\n                        v-model=\"empenho.valorEmpenho\"\n                        :maxLength=\"18\"\n                        :name=\"'valorEmpenho'\"\n                        :event-submit=\"'blur'\"\n                        :required=\"obrigatorio\"\n                        requeridMessage=\"O campo é obrigatório\"\n                        class=\"botaoExcluirMoney\"\n                        :placeholder=\"verificaPermissaoEdicao ? 'Informe o valor' : ' '\"\n                        :disabled=\"!verificaPermissaoEdicao || statusReconhecimento\"\n                        :class=\"{desativado: !verificaPermissaoEdicao}\"\n                        v-validate=\" obrigatorio ? 'required' : ''\"\n                        @input=\"atualizarValorInserido($event)\">\n                        <template v-slot:label>\n                            <label-personalizado campo=\"valorEmpenho\" :tela=\"nomeTela\" :permissaoEdicao=\"obrigatorio && verificaPermissaoEdicao\"\n                                                 obrigatorioPorPadrao/>\n                        </template>\n                    </az-money>\n                </v-col>\n            </v-row>\n        </div>\n        <v-col cols=\"2\" class=\"botoesEmpenho\">\n            <acoes-icones-circular-adicionar-remover\n                :desabilitar-adicionar=\"!verificaPermissaoEdicao || !this.camposPreenchidos\"\n                :desabilitar-remover=\"!verificaPermissaoEdicao || quantidadeEmpenhos ===1\"\n                :ocultar-adicionar=\"primeiroEmpenho && quantidadeEmpenhos <10\"\n                @remover=\"remover\"\n                @adicionar=\"adicionarNovoEmpenho\"/>\n        </v-col>\n    </div>\n</template>\n\n<script>\n    import {mapActions} from 'vuex'\n    import AzHasPermissions from '@azinformatica/loki/src/utils/AzHasPermissions'\n    import LabelPersonalizado from '@/views/components/label/LabelPersonalizado'\n    import {actionTypes} from '@/core/constants'\n    import moment from 'moment'\n    import AcoesIconesCircularAdicionarRemover from '@/views/components/acoes/AcoesIconesCircularAdicionarRemover'\n\n    export default {\n        name: 'Empenho',\n        components:{AcoesIconesCircularAdicionarRemover, LabelPersonalizado},\n        props: {\n            value: Object,\n            obrigatorio: {\n                type: Boolean,\n                default: false\n            },\n            statusReconhecimento:{\n                type: Boolean,\n                default: true\n            },\n            primeiroEmpenho: {\n                type: Boolean,\n                default: false\n            },\n            idIncorporacao:{\n                required: true\n            },\n            quantidadeEmpenhos: {\n                required: true\n            }\n        },\n        data() {\n            return {\n                placeholders: {\n                    date: '__/__/____',\n                },\n                empenho: this.value,\n                nomeTela: 'INCORPORACAO_DADOS_GERAIS'\n            }\n        },\n        computed: {\n            camposPreenchidos() {\n                return this.empenho.numeroEmpenho && this.empenho.dataEmpenho && this.empenho.valorEmpenho\n            },\n            verificaPermissaoEdicao() {\n                return AzHasPermissions(this.$store.state.loki.user.authorities, [\n                    'Mobiliario.Normal',\n                ])\n            },\n        },\n        methods: {\n            ...mapActions([\n                actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.INSERIR_EMPENHO,\n                actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.ATUALIZAR_EMPENHO,\n                actionTypes.PATRIMONIO.INCORPORACAO.EMPENHO.REMOVER_EMPENHO\n            ]),\n            atualizarValorInserido(valor) {\n                this.empenho.valorEmpenho = valor\n                this.editarEmpenho()\n            },\n            async editarEmpenho() {\n                if (this.camposPreenchidos) {\n                    await this.desabilitarLoadingGlobal()\n                    if (this.empenho.id) {\n                        await this.editar()\n                    } else {\n                        await this.salvar()\n                    }\n                    await this.habilitarLoadingGlobal()\n                    this.$emit('buscarEmpenhos')\n                }\n            },\n            async editar() {\n                if (this.empenho.dataEmpenho !== null) {\n                    this.empenho.dataEmpenho = moment(this.empenho.dataEmpenho).format('YYYY-MM-DDTHH:mm:ss.SSSZZ')\n                }\n                this.empenho.incorporacaoId = this.idIncorporacao\n                await this.atualizarEmpenho(this.empenho)\n\n            },\n            async salvar() {\n                await this.inserirEmpenho(this.empenho)\n            },\n            async adicionarNovoEmpenho() {\n                if (this.quantidadeEmpenhos >= 10) {\n                    this.mostrarNotificacaoAviso('Não é possível cadastrar mais que 10 empenhos!')\n                }\n                if (this.camposPreenchidos && this.quantidadeEmpenhos < 10) {\n                    this.$emit('adicionarNovoEmpenho')\n                }\n            },\n            async remover() {\n                if (this.empenho.id) {\n                    await this.removerEmpenho(this.empenho.id)\n                }\n                this.$emit('removerEmpenho', this.empenho.id)\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"stylus\">\n    .form\n        margin 0\n\n    .empenho\n        display flex\n        align-items center\n        width 100%\n\n        .empenhoForm\n            width 100%\n\n    [class^=\"col\"]\n        padding 15px 12px 0 15px\n\n    .botoesEmpenho\n        max-width: 100px\n</style>\n"]}]}